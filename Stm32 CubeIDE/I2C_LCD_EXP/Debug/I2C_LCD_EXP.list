
I2C_LCD_EXP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001aa8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08001b68  08001b68  00011b68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001b98  08001b98  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001b98  08001b98  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001b98  08001b98  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001b98  08001b98  00011b98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001b9c  08001b9c  00011b9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001ba0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000070  2000000c  08001bac  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000007c  08001bac  0002007c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000604e  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000133b  00000000  00000000  00026082  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000660  00000000  00000000  000273c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000005a8  00000000  00000000  00027a20  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000b949  00000000  00000000  00027fc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000062c7  00000000  00000000  00033911  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00041073  00000000  00000000  00039bd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0007ac4b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001570  00000000  00000000  0007acc8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08001b50 	.word	0x08001b50

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08001b50 	.word	0x08001b50

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <findTheSlaveDeviceAddress>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void findTheSlaveDeviceAddress(){
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0

	for(address = 0; address <= 255; address++)
 8000224:	4b0f      	ldr	r3, [pc, #60]	; (8000264 <findTheSlaveDeviceAddress+0x44>)
 8000226:	2200      	movs	r2, #0
 8000228:	701a      	strb	r2, [r3, #0]
	{
		if(HAL_I2C_IsDeviceReady(&hi2c1, address, 1, 1000) == HAL_OK)
 800022a:	4b0e      	ldr	r3, [pc, #56]	; (8000264 <findTheSlaveDeviceAddress+0x44>)
 800022c:	781b      	ldrb	r3, [r3, #0]
 800022e:	b299      	uxth	r1, r3
 8000230:	23fa      	movs	r3, #250	; 0xfa
 8000232:	009b      	lsls	r3, r3, #2
 8000234:	480c      	ldr	r0, [pc, #48]	; (8000268 <findTheSlaveDeviceAddress+0x48>)
 8000236:	2201      	movs	r2, #1
 8000238:	f000 fd3c 	bl	8000cb4 <HAL_I2C_IsDeviceReady>
 800023c:	1e03      	subs	r3, r0, #0
 800023e:	d107      	bne.n	8000250 <findTheSlaveDeviceAddress+0x30>
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000240:	2390      	movs	r3, #144	; 0x90
 8000242:	05db      	lsls	r3, r3, #23
 8000244:	2201      	movs	r2, #1
 8000246:	2120      	movs	r1, #32
 8000248:	0018      	movs	r0, r3
 800024a:	f000 fc7f 	bl	8000b4c <HAL_GPIO_WritePin>
			break;
 800024e:	e006      	b.n	800025e <findTheSlaveDeviceAddress+0x3e>
	for(address = 0; address <= 255; address++)
 8000250:	4b04      	ldr	r3, [pc, #16]	; (8000264 <findTheSlaveDeviceAddress+0x44>)
 8000252:	781b      	ldrb	r3, [r3, #0]
 8000254:	3301      	adds	r3, #1
 8000256:	b2da      	uxtb	r2, r3
 8000258:	4b02      	ldr	r3, [pc, #8]	; (8000264 <findTheSlaveDeviceAddress+0x44>)
 800025a:	701a      	strb	r2, [r3, #0]
		if(HAL_I2C_IsDeviceReady(&hi2c1, address, 1, 1000) == HAL_OK)
 800025c:	e7e5      	b.n	800022a <findTheSlaveDeviceAddress+0xa>
		}
	}
}
 800025e:	46c0      	nop			; (mov r8, r8)
 8000260:	46bd      	mov	sp, r7
 8000262:	bd80      	pop	{r7, pc}
 8000264:	20000028 	.word	0x20000028
 8000268:	2000002c 	.word	0x2000002c

0800026c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000270:	f000 f9c2 	bl	80005f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000274:	f000 f80e 	bl	8000294 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000278:	f000 f8b6 	bl	80003e8 <MX_GPIO_Init>
  MX_I2C1_Init();
 800027c:	f000 f86c 	bl	8000358 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  findTheSlaveDeviceAddress();
 8000280:	f7ff ffce 	bl	8000220 <findTheSlaveDeviceAddress>
  HAL_Delay(5000);
 8000284:	4b02      	ldr	r3, [pc, #8]	; (8000290 <main+0x24>)
 8000286:	0018      	movs	r0, r3
 8000288:	f000 fa1a 	bl	80006c0 <HAL_Delay>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800028c:	e7fe      	b.n	800028c <main+0x20>
 800028e:	46c0      	nop			; (mov r8, r8)
 8000290:	00001388 	.word	0x00001388

08000294 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000294:	b590      	push	{r4, r7, lr}
 8000296:	b097      	sub	sp, #92	; 0x5c
 8000298:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800029a:	2428      	movs	r4, #40	; 0x28
 800029c:	193b      	adds	r3, r7, r4
 800029e:	0018      	movs	r0, r3
 80002a0:	2330      	movs	r3, #48	; 0x30
 80002a2:	001a      	movs	r2, r3
 80002a4:	2100      	movs	r1, #0
 80002a6:	f001 fc4b 	bl	8001b40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002aa:	2318      	movs	r3, #24
 80002ac:	18fb      	adds	r3, r7, r3
 80002ae:	0018      	movs	r0, r3
 80002b0:	2310      	movs	r3, #16
 80002b2:	001a      	movs	r2, r3
 80002b4:	2100      	movs	r1, #0
 80002b6:	f001 fc43 	bl	8001b40 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002ba:	1d3b      	adds	r3, r7, #4
 80002bc:	0018      	movs	r0, r3
 80002be:	2314      	movs	r3, #20
 80002c0:	001a      	movs	r2, r3
 80002c2:	2100      	movs	r1, #0
 80002c4:	f001 fc3c 	bl	8001b40 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002c8:	0021      	movs	r1, r4
 80002ca:	187b      	adds	r3, r7, r1
 80002cc:	2202      	movs	r2, #2
 80002ce:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002d0:	187b      	adds	r3, r7, r1
 80002d2:	2201      	movs	r2, #1
 80002d4:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002d6:	187b      	adds	r3, r7, r1
 80002d8:	2210      	movs	r2, #16
 80002da:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002dc:	187b      	adds	r3, r7, r1
 80002de:	2202      	movs	r2, #2
 80002e0:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002e2:	187b      	adds	r3, r7, r1
 80002e4:	2280      	movs	r2, #128	; 0x80
 80002e6:	0212      	lsls	r2, r2, #8
 80002e8:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80002ea:	187b      	adds	r3, r7, r1
 80002ec:	2280      	movs	r2, #128	; 0x80
 80002ee:	0352      	lsls	r2, r2, #13
 80002f0:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80002f2:	187b      	adds	r3, r7, r1
 80002f4:	2200      	movs	r2, #0
 80002f6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002f8:	187b      	adds	r3, r7, r1
 80002fa:	0018      	movs	r0, r3
 80002fc:	f000 fecc 	bl	8001098 <HAL_RCC_OscConfig>
 8000300:	1e03      	subs	r3, r0, #0
 8000302:	d001      	beq.n	8000308 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000304:	f000 f8b8 	bl	8000478 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000308:	2118      	movs	r1, #24
 800030a:	187b      	adds	r3, r7, r1
 800030c:	2207      	movs	r2, #7
 800030e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000310:	187b      	adds	r3, r7, r1
 8000312:	2202      	movs	r2, #2
 8000314:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000316:	187b      	adds	r3, r7, r1
 8000318:	2200      	movs	r2, #0
 800031a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800031c:	187b      	adds	r3, r7, r1
 800031e:	2200      	movs	r2, #0
 8000320:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000322:	187b      	adds	r3, r7, r1
 8000324:	2101      	movs	r1, #1
 8000326:	0018      	movs	r0, r3
 8000328:	f001 f9d4 	bl	80016d4 <HAL_RCC_ClockConfig>
 800032c:	1e03      	subs	r3, r0, #0
 800032e:	d001      	beq.n	8000334 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000330:	f000 f8a2 	bl	8000478 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000334:	1d3b      	adds	r3, r7, #4
 8000336:	2220      	movs	r2, #32
 8000338:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800033a:	1d3b      	adds	r3, r7, #4
 800033c:	2200      	movs	r2, #0
 800033e:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000340:	1d3b      	adds	r3, r7, #4
 8000342:	0018      	movs	r0, r3
 8000344:	f001 fafa 	bl	800193c <HAL_RCCEx_PeriphCLKConfig>
 8000348:	1e03      	subs	r3, r0, #0
 800034a:	d001      	beq.n	8000350 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 800034c:	f000 f894 	bl	8000478 <Error_Handler>
  }
}
 8000350:	46c0      	nop			; (mov r8, r8)
 8000352:	46bd      	mov	sp, r7
 8000354:	b017      	add	sp, #92	; 0x5c
 8000356:	bd90      	pop	{r4, r7, pc}

08000358 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000358:	b580      	push	{r7, lr}
 800035a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800035c:	4b1f      	ldr	r3, [pc, #124]	; (80003dc <MX_I2C1_Init+0x84>)
 800035e:	4a20      	ldr	r2, [pc, #128]	; (80003e0 <MX_I2C1_Init+0x88>)
 8000360:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000001;
 8000362:	4b1e      	ldr	r3, [pc, #120]	; (80003dc <MX_I2C1_Init+0x84>)
 8000364:	2201      	movs	r2, #1
 8000366:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000368:	4b1c      	ldr	r3, [pc, #112]	; (80003dc <MX_I2C1_Init+0x84>)
 800036a:	2200      	movs	r2, #0
 800036c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800036e:	4b1b      	ldr	r3, [pc, #108]	; (80003dc <MX_I2C1_Init+0x84>)
 8000370:	2201      	movs	r2, #1
 8000372:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000374:	4b19      	ldr	r3, [pc, #100]	; (80003dc <MX_I2C1_Init+0x84>)
 8000376:	2200      	movs	r2, #0
 8000378:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800037a:	4b18      	ldr	r3, [pc, #96]	; (80003dc <MX_I2C1_Init+0x84>)
 800037c:	2200      	movs	r2, #0
 800037e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000380:	4b16      	ldr	r3, [pc, #88]	; (80003dc <MX_I2C1_Init+0x84>)
 8000382:	2200      	movs	r2, #0
 8000384:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000386:	4b15      	ldr	r3, [pc, #84]	; (80003dc <MX_I2C1_Init+0x84>)
 8000388:	2200      	movs	r2, #0
 800038a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800038c:	4b13      	ldr	r3, [pc, #76]	; (80003dc <MX_I2C1_Init+0x84>)
 800038e:	2200      	movs	r2, #0
 8000390:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000392:	4b12      	ldr	r3, [pc, #72]	; (80003dc <MX_I2C1_Init+0x84>)
 8000394:	0018      	movs	r0, r3
 8000396:	f000 fbf7 	bl	8000b88 <HAL_I2C_Init>
 800039a:	1e03      	subs	r3, r0, #0
 800039c:	d001      	beq.n	80003a2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800039e:	f000 f86b 	bl	8000478 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80003a2:	4b0e      	ldr	r3, [pc, #56]	; (80003dc <MX_I2C1_Init+0x84>)
 80003a4:	2100      	movs	r1, #0
 80003a6:	0018      	movs	r0, r3
 80003a8:	f000 fdde 	bl	8000f68 <HAL_I2CEx_ConfigAnalogFilter>
 80003ac:	1e03      	subs	r3, r0, #0
 80003ae:	d001      	beq.n	80003b4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80003b0:	f000 f862 	bl	8000478 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80003b4:	4b09      	ldr	r3, [pc, #36]	; (80003dc <MX_I2C1_Init+0x84>)
 80003b6:	2100      	movs	r1, #0
 80003b8:	0018      	movs	r0, r3
 80003ba:	f000 fe21 	bl	8001000 <HAL_I2CEx_ConfigDigitalFilter>
 80003be:	1e03      	subs	r3, r0, #0
 80003c0:	d001      	beq.n	80003c6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80003c2:	f000 f859 	bl	8000478 <Error_Handler>
  }
  /** I2C Fast mode Plus enable 
  */
  __HAL_SYSCFG_FASTMODEPLUS_ENABLE(I2C_FASTMODEPLUS_I2C1);
 80003c6:	4b07      	ldr	r3, [pc, #28]	; (80003e4 <MX_I2C1_Init+0x8c>)
 80003c8:	681a      	ldr	r2, [r3, #0]
 80003ca:	4b06      	ldr	r3, [pc, #24]	; (80003e4 <MX_I2C1_Init+0x8c>)
 80003cc:	2180      	movs	r1, #128	; 0x80
 80003ce:	0349      	lsls	r1, r1, #13
 80003d0:	430a      	orrs	r2, r1
 80003d2:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80003d4:	46c0      	nop			; (mov r8, r8)
 80003d6:	46bd      	mov	sp, r7
 80003d8:	bd80      	pop	{r7, pc}
 80003da:	46c0      	nop			; (mov r8, r8)
 80003dc:	2000002c 	.word	0x2000002c
 80003e0:	40005400 	.word	0x40005400
 80003e4:	40010000 	.word	0x40010000

080003e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003e8:	b590      	push	{r4, r7, lr}
 80003ea:	b089      	sub	sp, #36	; 0x24
 80003ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003ee:	240c      	movs	r4, #12
 80003f0:	193b      	adds	r3, r7, r4
 80003f2:	0018      	movs	r0, r3
 80003f4:	2314      	movs	r3, #20
 80003f6:	001a      	movs	r2, r3
 80003f8:	2100      	movs	r1, #0
 80003fa:	f001 fba1 	bl	8001b40 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003fe:	4b1d      	ldr	r3, [pc, #116]	; (8000474 <MX_GPIO_Init+0x8c>)
 8000400:	695a      	ldr	r2, [r3, #20]
 8000402:	4b1c      	ldr	r3, [pc, #112]	; (8000474 <MX_GPIO_Init+0x8c>)
 8000404:	2180      	movs	r1, #128	; 0x80
 8000406:	0289      	lsls	r1, r1, #10
 8000408:	430a      	orrs	r2, r1
 800040a:	615a      	str	r2, [r3, #20]
 800040c:	4b19      	ldr	r3, [pc, #100]	; (8000474 <MX_GPIO_Init+0x8c>)
 800040e:	695a      	ldr	r2, [r3, #20]
 8000410:	2380      	movs	r3, #128	; 0x80
 8000412:	029b      	lsls	r3, r3, #10
 8000414:	4013      	ands	r3, r2
 8000416:	60bb      	str	r3, [r7, #8]
 8000418:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800041a:	4b16      	ldr	r3, [pc, #88]	; (8000474 <MX_GPIO_Init+0x8c>)
 800041c:	695a      	ldr	r2, [r3, #20]
 800041e:	4b15      	ldr	r3, [pc, #84]	; (8000474 <MX_GPIO_Init+0x8c>)
 8000420:	2180      	movs	r1, #128	; 0x80
 8000422:	02c9      	lsls	r1, r1, #11
 8000424:	430a      	orrs	r2, r1
 8000426:	615a      	str	r2, [r3, #20]
 8000428:	4b12      	ldr	r3, [pc, #72]	; (8000474 <MX_GPIO_Init+0x8c>)
 800042a:	695a      	ldr	r2, [r3, #20]
 800042c:	2380      	movs	r3, #128	; 0x80
 800042e:	02db      	lsls	r3, r3, #11
 8000430:	4013      	ands	r3, r2
 8000432:	607b      	str	r3, [r7, #4]
 8000434:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000436:	2390      	movs	r3, #144	; 0x90
 8000438:	05db      	lsls	r3, r3, #23
 800043a:	2200      	movs	r2, #0
 800043c:	2120      	movs	r1, #32
 800043e:	0018      	movs	r0, r3
 8000440:	f000 fb84 	bl	8000b4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000444:	0021      	movs	r1, r4
 8000446:	187b      	adds	r3, r7, r1
 8000448:	2220      	movs	r2, #32
 800044a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800044c:	187b      	adds	r3, r7, r1
 800044e:	2201      	movs	r2, #1
 8000450:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000452:	187b      	adds	r3, r7, r1
 8000454:	2200      	movs	r2, #0
 8000456:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000458:	187b      	adds	r3, r7, r1
 800045a:	2203      	movs	r2, #3
 800045c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800045e:	187a      	adds	r2, r7, r1
 8000460:	2390      	movs	r3, #144	; 0x90
 8000462:	05db      	lsls	r3, r3, #23
 8000464:	0011      	movs	r1, r2
 8000466:	0018      	movs	r0, r3
 8000468:	f000 fa00 	bl	800086c <HAL_GPIO_Init>

}
 800046c:	46c0      	nop			; (mov r8, r8)
 800046e:	46bd      	mov	sp, r7
 8000470:	b009      	add	sp, #36	; 0x24
 8000472:	bd90      	pop	{r4, r7, pc}
 8000474:	40021000 	.word	0x40021000

08000478 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800047c:	46c0      	nop			; (mov r8, r8)
 800047e:	46bd      	mov	sp, r7
 8000480:	bd80      	pop	{r7, pc}
	...

08000484 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	b082      	sub	sp, #8
 8000488:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800048a:	4b0f      	ldr	r3, [pc, #60]	; (80004c8 <HAL_MspInit+0x44>)
 800048c:	699a      	ldr	r2, [r3, #24]
 800048e:	4b0e      	ldr	r3, [pc, #56]	; (80004c8 <HAL_MspInit+0x44>)
 8000490:	2101      	movs	r1, #1
 8000492:	430a      	orrs	r2, r1
 8000494:	619a      	str	r2, [r3, #24]
 8000496:	4b0c      	ldr	r3, [pc, #48]	; (80004c8 <HAL_MspInit+0x44>)
 8000498:	699b      	ldr	r3, [r3, #24]
 800049a:	2201      	movs	r2, #1
 800049c:	4013      	ands	r3, r2
 800049e:	607b      	str	r3, [r7, #4]
 80004a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004a2:	4b09      	ldr	r3, [pc, #36]	; (80004c8 <HAL_MspInit+0x44>)
 80004a4:	69da      	ldr	r2, [r3, #28]
 80004a6:	4b08      	ldr	r3, [pc, #32]	; (80004c8 <HAL_MspInit+0x44>)
 80004a8:	2180      	movs	r1, #128	; 0x80
 80004aa:	0549      	lsls	r1, r1, #21
 80004ac:	430a      	orrs	r2, r1
 80004ae:	61da      	str	r2, [r3, #28]
 80004b0:	4b05      	ldr	r3, [pc, #20]	; (80004c8 <HAL_MspInit+0x44>)
 80004b2:	69da      	ldr	r2, [r3, #28]
 80004b4:	2380      	movs	r3, #128	; 0x80
 80004b6:	055b      	lsls	r3, r3, #21
 80004b8:	4013      	ands	r3, r2
 80004ba:	603b      	str	r3, [r7, #0]
 80004bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004be:	46c0      	nop			; (mov r8, r8)
 80004c0:	46bd      	mov	sp, r7
 80004c2:	b002      	add	sp, #8
 80004c4:	bd80      	pop	{r7, pc}
 80004c6:	46c0      	nop			; (mov r8, r8)
 80004c8:	40021000 	.word	0x40021000

080004cc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b08a      	sub	sp, #40	; 0x28
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004d4:	2314      	movs	r3, #20
 80004d6:	18fb      	adds	r3, r7, r3
 80004d8:	0018      	movs	r0, r3
 80004da:	2314      	movs	r3, #20
 80004dc:	001a      	movs	r2, r3
 80004de:	2100      	movs	r1, #0
 80004e0:	f001 fb2e 	bl	8001b40 <memset>
  if(hi2c->Instance==I2C1)
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	4a1c      	ldr	r2, [pc, #112]	; (800055c <HAL_I2C_MspInit+0x90>)
 80004ea:	4293      	cmp	r3, r2
 80004ec:	d131      	bne.n	8000552 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80004ee:	4b1c      	ldr	r3, [pc, #112]	; (8000560 <HAL_I2C_MspInit+0x94>)
 80004f0:	695a      	ldr	r2, [r3, #20]
 80004f2:	4b1b      	ldr	r3, [pc, #108]	; (8000560 <HAL_I2C_MspInit+0x94>)
 80004f4:	2180      	movs	r1, #128	; 0x80
 80004f6:	02c9      	lsls	r1, r1, #11
 80004f8:	430a      	orrs	r2, r1
 80004fa:	615a      	str	r2, [r3, #20]
 80004fc:	4b18      	ldr	r3, [pc, #96]	; (8000560 <HAL_I2C_MspInit+0x94>)
 80004fe:	695a      	ldr	r2, [r3, #20]
 8000500:	2380      	movs	r3, #128	; 0x80
 8000502:	02db      	lsls	r3, r3, #11
 8000504:	4013      	ands	r3, r2
 8000506:	613b      	str	r3, [r7, #16]
 8000508:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800050a:	2114      	movs	r1, #20
 800050c:	187b      	adds	r3, r7, r1
 800050e:	22c0      	movs	r2, #192	; 0xc0
 8000510:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000512:	187b      	adds	r3, r7, r1
 8000514:	2212      	movs	r2, #18
 8000516:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000518:	187b      	adds	r3, r7, r1
 800051a:	2201      	movs	r2, #1
 800051c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800051e:	187b      	adds	r3, r7, r1
 8000520:	2203      	movs	r2, #3
 8000522:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8000524:	187b      	adds	r3, r7, r1
 8000526:	2201      	movs	r2, #1
 8000528:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800052a:	187b      	adds	r3, r7, r1
 800052c:	4a0d      	ldr	r2, [pc, #52]	; (8000564 <HAL_I2C_MspInit+0x98>)
 800052e:	0019      	movs	r1, r3
 8000530:	0010      	movs	r0, r2
 8000532:	f000 f99b 	bl	800086c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000536:	4b0a      	ldr	r3, [pc, #40]	; (8000560 <HAL_I2C_MspInit+0x94>)
 8000538:	69da      	ldr	r2, [r3, #28]
 800053a:	4b09      	ldr	r3, [pc, #36]	; (8000560 <HAL_I2C_MspInit+0x94>)
 800053c:	2180      	movs	r1, #128	; 0x80
 800053e:	0389      	lsls	r1, r1, #14
 8000540:	430a      	orrs	r2, r1
 8000542:	61da      	str	r2, [r3, #28]
 8000544:	4b06      	ldr	r3, [pc, #24]	; (8000560 <HAL_I2C_MspInit+0x94>)
 8000546:	69da      	ldr	r2, [r3, #28]
 8000548:	2380      	movs	r3, #128	; 0x80
 800054a:	039b      	lsls	r3, r3, #14
 800054c:	4013      	ands	r3, r2
 800054e:	60fb      	str	r3, [r7, #12]
 8000550:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000552:	46c0      	nop			; (mov r8, r8)
 8000554:	46bd      	mov	sp, r7
 8000556:	b00a      	add	sp, #40	; 0x28
 8000558:	bd80      	pop	{r7, pc}
 800055a:	46c0      	nop			; (mov r8, r8)
 800055c:	40005400 	.word	0x40005400
 8000560:	40021000 	.word	0x40021000
 8000564:	48000400 	.word	0x48000400

08000568 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800056c:	46c0      	nop			; (mov r8, r8)
 800056e:	46bd      	mov	sp, r7
 8000570:	bd80      	pop	{r7, pc}

08000572 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000572:	b580      	push	{r7, lr}
 8000574:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000576:	e7fe      	b.n	8000576 <HardFault_Handler+0x4>

08000578 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800057c:	46c0      	nop			; (mov r8, r8)
 800057e:	46bd      	mov	sp, r7
 8000580:	bd80      	pop	{r7, pc}

08000582 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000582:	b580      	push	{r7, lr}
 8000584:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000586:	46c0      	nop			; (mov r8, r8)
 8000588:	46bd      	mov	sp, r7
 800058a:	bd80      	pop	{r7, pc}

0800058c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000590:	f000 f87a 	bl	8000688 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000594:	46c0      	nop			; (mov r8, r8)
 8000596:	46bd      	mov	sp, r7
 8000598:	bd80      	pop	{r7, pc}

0800059a <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800059a:	b580      	push	{r7, lr}
 800059c:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800059e:	46c0      	nop			; (mov r8, r8)
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}

080005a4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80005a4:	480d      	ldr	r0, [pc, #52]	; (80005dc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80005a6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005a8:	480d      	ldr	r0, [pc, #52]	; (80005e0 <LoopForever+0x6>)
  ldr r1, =_edata
 80005aa:	490e      	ldr	r1, [pc, #56]	; (80005e4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80005ac:	4a0e      	ldr	r2, [pc, #56]	; (80005e8 <LoopForever+0xe>)
  movs r3, #0
 80005ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005b0:	e002      	b.n	80005b8 <LoopCopyDataInit>

080005b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005b6:	3304      	adds	r3, #4

080005b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005bc:	d3f9      	bcc.n	80005b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005be:	4a0b      	ldr	r2, [pc, #44]	; (80005ec <LoopForever+0x12>)
  ldr r4, =_ebss
 80005c0:	4c0b      	ldr	r4, [pc, #44]	; (80005f0 <LoopForever+0x16>)
  movs r3, #0
 80005c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005c4:	e001      	b.n	80005ca <LoopFillZerobss>

080005c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005c8:	3204      	adds	r2, #4

080005ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005cc:	d3fb      	bcc.n	80005c6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80005ce:	f7ff ffe4 	bl	800059a <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80005d2:	f001 fa91 	bl	8001af8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005d6:	f7ff fe49 	bl	800026c <main>

080005da <LoopForever>:

LoopForever:
    b LoopForever
 80005da:	e7fe      	b.n	80005da <LoopForever>
  ldr   r0, =_estack
 80005dc:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80005e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005e4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80005e8:	08001ba0 	.word	0x08001ba0
  ldr r2, =_sbss
 80005ec:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80005f0:	2000007c 	.word	0x2000007c

080005f4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005f4:	e7fe      	b.n	80005f4 <ADC1_IRQHandler>
	...

080005f8 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005fc:	4b07      	ldr	r3, [pc, #28]	; (800061c <HAL_Init+0x24>)
 80005fe:	681a      	ldr	r2, [r3, #0]
 8000600:	4b06      	ldr	r3, [pc, #24]	; (800061c <HAL_Init+0x24>)
 8000602:	2110      	movs	r1, #16
 8000604:	430a      	orrs	r2, r1
 8000606:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000608:	2000      	movs	r0, #0
 800060a:	f000 f809 	bl	8000620 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800060e:	f7ff ff39 	bl	8000484 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000612:	2300      	movs	r3, #0
}
 8000614:	0018      	movs	r0, r3
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}
 800061a:	46c0      	nop			; (mov r8, r8)
 800061c:	40022000 	.word	0x40022000

08000620 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000620:	b590      	push	{r4, r7, lr}
 8000622:	b083      	sub	sp, #12
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000628:	4b14      	ldr	r3, [pc, #80]	; (800067c <HAL_InitTick+0x5c>)
 800062a:	681c      	ldr	r4, [r3, #0]
 800062c:	4b14      	ldr	r3, [pc, #80]	; (8000680 <HAL_InitTick+0x60>)
 800062e:	781b      	ldrb	r3, [r3, #0]
 8000630:	0019      	movs	r1, r3
 8000632:	23fa      	movs	r3, #250	; 0xfa
 8000634:	0098      	lsls	r0, r3, #2
 8000636:	f7ff fd67 	bl	8000108 <__udivsi3>
 800063a:	0003      	movs	r3, r0
 800063c:	0019      	movs	r1, r3
 800063e:	0020      	movs	r0, r4
 8000640:	f7ff fd62 	bl	8000108 <__udivsi3>
 8000644:	0003      	movs	r3, r0
 8000646:	0018      	movs	r0, r3
 8000648:	f000 f903 	bl	8000852 <HAL_SYSTICK_Config>
 800064c:	1e03      	subs	r3, r0, #0
 800064e:	d001      	beq.n	8000654 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000650:	2301      	movs	r3, #1
 8000652:	e00f      	b.n	8000674 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	2b03      	cmp	r3, #3
 8000658:	d80b      	bhi.n	8000672 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800065a:	6879      	ldr	r1, [r7, #4]
 800065c:	2301      	movs	r3, #1
 800065e:	425b      	negs	r3, r3
 8000660:	2200      	movs	r2, #0
 8000662:	0018      	movs	r0, r3
 8000664:	f000 f8e0 	bl	8000828 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000668:	4b06      	ldr	r3, [pc, #24]	; (8000684 <HAL_InitTick+0x64>)
 800066a:	687a      	ldr	r2, [r7, #4]
 800066c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800066e:	2300      	movs	r3, #0
 8000670:	e000      	b.n	8000674 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000672:	2301      	movs	r3, #1
}
 8000674:	0018      	movs	r0, r3
 8000676:	46bd      	mov	sp, r7
 8000678:	b003      	add	sp, #12
 800067a:	bd90      	pop	{r4, r7, pc}
 800067c:	20000000 	.word	0x20000000
 8000680:	20000008 	.word	0x20000008
 8000684:	20000004 	.word	0x20000004

08000688 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800068c:	4b05      	ldr	r3, [pc, #20]	; (80006a4 <HAL_IncTick+0x1c>)
 800068e:	781b      	ldrb	r3, [r3, #0]
 8000690:	001a      	movs	r2, r3
 8000692:	4b05      	ldr	r3, [pc, #20]	; (80006a8 <HAL_IncTick+0x20>)
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	18d2      	adds	r2, r2, r3
 8000698:	4b03      	ldr	r3, [pc, #12]	; (80006a8 <HAL_IncTick+0x20>)
 800069a:	601a      	str	r2, [r3, #0]
}
 800069c:	46c0      	nop			; (mov r8, r8)
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	46c0      	nop			; (mov r8, r8)
 80006a4:	20000008 	.word	0x20000008
 80006a8:	20000078 	.word	0x20000078

080006ac <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
  return uwTick;
 80006b0:	4b02      	ldr	r3, [pc, #8]	; (80006bc <HAL_GetTick+0x10>)
 80006b2:	681b      	ldr	r3, [r3, #0]
}
 80006b4:	0018      	movs	r0, r3
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	46c0      	nop			; (mov r8, r8)
 80006bc:	20000078 	.word	0x20000078

080006c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b084      	sub	sp, #16
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80006c8:	f7ff fff0 	bl	80006ac <HAL_GetTick>
 80006cc:	0003      	movs	r3, r0
 80006ce:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80006d4:	68fb      	ldr	r3, [r7, #12]
 80006d6:	3301      	adds	r3, #1
 80006d8:	d005      	beq.n	80006e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80006da:	4b09      	ldr	r3, [pc, #36]	; (8000700 <HAL_Delay+0x40>)
 80006dc:	781b      	ldrb	r3, [r3, #0]
 80006de:	001a      	movs	r2, r3
 80006e0:	68fb      	ldr	r3, [r7, #12]
 80006e2:	189b      	adds	r3, r3, r2
 80006e4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80006e6:	46c0      	nop			; (mov r8, r8)
 80006e8:	f7ff ffe0 	bl	80006ac <HAL_GetTick>
 80006ec:	0002      	movs	r2, r0
 80006ee:	68bb      	ldr	r3, [r7, #8]
 80006f0:	1ad3      	subs	r3, r2, r3
 80006f2:	68fa      	ldr	r2, [r7, #12]
 80006f4:	429a      	cmp	r2, r3
 80006f6:	d8f7      	bhi.n	80006e8 <HAL_Delay+0x28>
  {
  }
}
 80006f8:	46c0      	nop			; (mov r8, r8)
 80006fa:	46bd      	mov	sp, r7
 80006fc:	b004      	add	sp, #16
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	20000008 	.word	0x20000008

08000704 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000704:	b590      	push	{r4, r7, lr}
 8000706:	b083      	sub	sp, #12
 8000708:	af00      	add	r7, sp, #0
 800070a:	0002      	movs	r2, r0
 800070c:	6039      	str	r1, [r7, #0]
 800070e:	1dfb      	adds	r3, r7, #7
 8000710:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000712:	1dfb      	adds	r3, r7, #7
 8000714:	781b      	ldrb	r3, [r3, #0]
 8000716:	2b7f      	cmp	r3, #127	; 0x7f
 8000718:	d828      	bhi.n	800076c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800071a:	4a2f      	ldr	r2, [pc, #188]	; (80007d8 <__NVIC_SetPriority+0xd4>)
 800071c:	1dfb      	adds	r3, r7, #7
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	b25b      	sxtb	r3, r3
 8000722:	089b      	lsrs	r3, r3, #2
 8000724:	33c0      	adds	r3, #192	; 0xc0
 8000726:	009b      	lsls	r3, r3, #2
 8000728:	589b      	ldr	r3, [r3, r2]
 800072a:	1dfa      	adds	r2, r7, #7
 800072c:	7812      	ldrb	r2, [r2, #0]
 800072e:	0011      	movs	r1, r2
 8000730:	2203      	movs	r2, #3
 8000732:	400a      	ands	r2, r1
 8000734:	00d2      	lsls	r2, r2, #3
 8000736:	21ff      	movs	r1, #255	; 0xff
 8000738:	4091      	lsls	r1, r2
 800073a:	000a      	movs	r2, r1
 800073c:	43d2      	mvns	r2, r2
 800073e:	401a      	ands	r2, r3
 8000740:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000742:	683b      	ldr	r3, [r7, #0]
 8000744:	019b      	lsls	r3, r3, #6
 8000746:	22ff      	movs	r2, #255	; 0xff
 8000748:	401a      	ands	r2, r3
 800074a:	1dfb      	adds	r3, r7, #7
 800074c:	781b      	ldrb	r3, [r3, #0]
 800074e:	0018      	movs	r0, r3
 8000750:	2303      	movs	r3, #3
 8000752:	4003      	ands	r3, r0
 8000754:	00db      	lsls	r3, r3, #3
 8000756:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000758:	481f      	ldr	r0, [pc, #124]	; (80007d8 <__NVIC_SetPriority+0xd4>)
 800075a:	1dfb      	adds	r3, r7, #7
 800075c:	781b      	ldrb	r3, [r3, #0]
 800075e:	b25b      	sxtb	r3, r3
 8000760:	089b      	lsrs	r3, r3, #2
 8000762:	430a      	orrs	r2, r1
 8000764:	33c0      	adds	r3, #192	; 0xc0
 8000766:	009b      	lsls	r3, r3, #2
 8000768:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800076a:	e031      	b.n	80007d0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800076c:	4a1b      	ldr	r2, [pc, #108]	; (80007dc <__NVIC_SetPriority+0xd8>)
 800076e:	1dfb      	adds	r3, r7, #7
 8000770:	781b      	ldrb	r3, [r3, #0]
 8000772:	0019      	movs	r1, r3
 8000774:	230f      	movs	r3, #15
 8000776:	400b      	ands	r3, r1
 8000778:	3b08      	subs	r3, #8
 800077a:	089b      	lsrs	r3, r3, #2
 800077c:	3306      	adds	r3, #6
 800077e:	009b      	lsls	r3, r3, #2
 8000780:	18d3      	adds	r3, r2, r3
 8000782:	3304      	adds	r3, #4
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	1dfa      	adds	r2, r7, #7
 8000788:	7812      	ldrb	r2, [r2, #0]
 800078a:	0011      	movs	r1, r2
 800078c:	2203      	movs	r2, #3
 800078e:	400a      	ands	r2, r1
 8000790:	00d2      	lsls	r2, r2, #3
 8000792:	21ff      	movs	r1, #255	; 0xff
 8000794:	4091      	lsls	r1, r2
 8000796:	000a      	movs	r2, r1
 8000798:	43d2      	mvns	r2, r2
 800079a:	401a      	ands	r2, r3
 800079c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800079e:	683b      	ldr	r3, [r7, #0]
 80007a0:	019b      	lsls	r3, r3, #6
 80007a2:	22ff      	movs	r2, #255	; 0xff
 80007a4:	401a      	ands	r2, r3
 80007a6:	1dfb      	adds	r3, r7, #7
 80007a8:	781b      	ldrb	r3, [r3, #0]
 80007aa:	0018      	movs	r0, r3
 80007ac:	2303      	movs	r3, #3
 80007ae:	4003      	ands	r3, r0
 80007b0:	00db      	lsls	r3, r3, #3
 80007b2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007b4:	4809      	ldr	r0, [pc, #36]	; (80007dc <__NVIC_SetPriority+0xd8>)
 80007b6:	1dfb      	adds	r3, r7, #7
 80007b8:	781b      	ldrb	r3, [r3, #0]
 80007ba:	001c      	movs	r4, r3
 80007bc:	230f      	movs	r3, #15
 80007be:	4023      	ands	r3, r4
 80007c0:	3b08      	subs	r3, #8
 80007c2:	089b      	lsrs	r3, r3, #2
 80007c4:	430a      	orrs	r2, r1
 80007c6:	3306      	adds	r3, #6
 80007c8:	009b      	lsls	r3, r3, #2
 80007ca:	18c3      	adds	r3, r0, r3
 80007cc:	3304      	adds	r3, #4
 80007ce:	601a      	str	r2, [r3, #0]
}
 80007d0:	46c0      	nop			; (mov r8, r8)
 80007d2:	46bd      	mov	sp, r7
 80007d4:	b003      	add	sp, #12
 80007d6:	bd90      	pop	{r4, r7, pc}
 80007d8:	e000e100 	.word	0xe000e100
 80007dc:	e000ed00 	.word	0xe000ed00

080007e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	3b01      	subs	r3, #1
 80007ec:	4a0c      	ldr	r2, [pc, #48]	; (8000820 <SysTick_Config+0x40>)
 80007ee:	4293      	cmp	r3, r2
 80007f0:	d901      	bls.n	80007f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007f2:	2301      	movs	r3, #1
 80007f4:	e010      	b.n	8000818 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007f6:	4b0b      	ldr	r3, [pc, #44]	; (8000824 <SysTick_Config+0x44>)
 80007f8:	687a      	ldr	r2, [r7, #4]
 80007fa:	3a01      	subs	r2, #1
 80007fc:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007fe:	2301      	movs	r3, #1
 8000800:	425b      	negs	r3, r3
 8000802:	2103      	movs	r1, #3
 8000804:	0018      	movs	r0, r3
 8000806:	f7ff ff7d 	bl	8000704 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800080a:	4b06      	ldr	r3, [pc, #24]	; (8000824 <SysTick_Config+0x44>)
 800080c:	2200      	movs	r2, #0
 800080e:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000810:	4b04      	ldr	r3, [pc, #16]	; (8000824 <SysTick_Config+0x44>)
 8000812:	2207      	movs	r2, #7
 8000814:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000816:	2300      	movs	r3, #0
}
 8000818:	0018      	movs	r0, r3
 800081a:	46bd      	mov	sp, r7
 800081c:	b002      	add	sp, #8
 800081e:	bd80      	pop	{r7, pc}
 8000820:	00ffffff 	.word	0x00ffffff
 8000824:	e000e010 	.word	0xe000e010

08000828 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000828:	b580      	push	{r7, lr}
 800082a:	b084      	sub	sp, #16
 800082c:	af00      	add	r7, sp, #0
 800082e:	60b9      	str	r1, [r7, #8]
 8000830:	607a      	str	r2, [r7, #4]
 8000832:	210f      	movs	r1, #15
 8000834:	187b      	adds	r3, r7, r1
 8000836:	1c02      	adds	r2, r0, #0
 8000838:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800083a:	68ba      	ldr	r2, [r7, #8]
 800083c:	187b      	adds	r3, r7, r1
 800083e:	781b      	ldrb	r3, [r3, #0]
 8000840:	b25b      	sxtb	r3, r3
 8000842:	0011      	movs	r1, r2
 8000844:	0018      	movs	r0, r3
 8000846:	f7ff ff5d 	bl	8000704 <__NVIC_SetPriority>
}
 800084a:	46c0      	nop			; (mov r8, r8)
 800084c:	46bd      	mov	sp, r7
 800084e:	b004      	add	sp, #16
 8000850:	bd80      	pop	{r7, pc}

08000852 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000852:	b580      	push	{r7, lr}
 8000854:	b082      	sub	sp, #8
 8000856:	af00      	add	r7, sp, #0
 8000858:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	0018      	movs	r0, r3
 800085e:	f7ff ffbf 	bl	80007e0 <SysTick_Config>
 8000862:	0003      	movs	r3, r0
}
 8000864:	0018      	movs	r0, r3
 8000866:	46bd      	mov	sp, r7
 8000868:	b002      	add	sp, #8
 800086a:	bd80      	pop	{r7, pc}

0800086c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 800086c:	b580      	push	{r7, lr}
 800086e:	b086      	sub	sp, #24
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
 8000874:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000876:	2300      	movs	r3, #0
 8000878:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800087a:	e14f      	b.n	8000b1c <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800087c:	683b      	ldr	r3, [r7, #0]
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	2101      	movs	r1, #1
 8000882:	697a      	ldr	r2, [r7, #20]
 8000884:	4091      	lsls	r1, r2
 8000886:	000a      	movs	r2, r1
 8000888:	4013      	ands	r3, r2
 800088a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800088c:	68fb      	ldr	r3, [r7, #12]
 800088e:	2b00      	cmp	r3, #0
 8000890:	d100      	bne.n	8000894 <HAL_GPIO_Init+0x28>
 8000892:	e140      	b.n	8000b16 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000894:	683b      	ldr	r3, [r7, #0]
 8000896:	685b      	ldr	r3, [r3, #4]
 8000898:	2b02      	cmp	r3, #2
 800089a:	d003      	beq.n	80008a4 <HAL_GPIO_Init+0x38>
 800089c:	683b      	ldr	r3, [r7, #0]
 800089e:	685b      	ldr	r3, [r3, #4]
 80008a0:	2b12      	cmp	r3, #18
 80008a2:	d123      	bne.n	80008ec <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80008a4:	697b      	ldr	r3, [r7, #20]
 80008a6:	08da      	lsrs	r2, r3, #3
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	3208      	adds	r2, #8
 80008ac:	0092      	lsls	r2, r2, #2
 80008ae:	58d3      	ldr	r3, [r2, r3]
 80008b0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80008b2:	697b      	ldr	r3, [r7, #20]
 80008b4:	2207      	movs	r2, #7
 80008b6:	4013      	ands	r3, r2
 80008b8:	009b      	lsls	r3, r3, #2
 80008ba:	220f      	movs	r2, #15
 80008bc:	409a      	lsls	r2, r3
 80008be:	0013      	movs	r3, r2
 80008c0:	43da      	mvns	r2, r3
 80008c2:	693b      	ldr	r3, [r7, #16]
 80008c4:	4013      	ands	r3, r2
 80008c6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80008c8:	683b      	ldr	r3, [r7, #0]
 80008ca:	691a      	ldr	r2, [r3, #16]
 80008cc:	697b      	ldr	r3, [r7, #20]
 80008ce:	2107      	movs	r1, #7
 80008d0:	400b      	ands	r3, r1
 80008d2:	009b      	lsls	r3, r3, #2
 80008d4:	409a      	lsls	r2, r3
 80008d6:	0013      	movs	r3, r2
 80008d8:	693a      	ldr	r2, [r7, #16]
 80008da:	4313      	orrs	r3, r2
 80008dc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80008de:	697b      	ldr	r3, [r7, #20]
 80008e0:	08da      	lsrs	r2, r3, #3
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	3208      	adds	r2, #8
 80008e6:	0092      	lsls	r2, r2, #2
 80008e8:	6939      	ldr	r1, [r7, #16]
 80008ea:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80008f2:	697b      	ldr	r3, [r7, #20]
 80008f4:	005b      	lsls	r3, r3, #1
 80008f6:	2203      	movs	r2, #3
 80008f8:	409a      	lsls	r2, r3
 80008fa:	0013      	movs	r3, r2
 80008fc:	43da      	mvns	r2, r3
 80008fe:	693b      	ldr	r3, [r7, #16]
 8000900:	4013      	ands	r3, r2
 8000902:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000904:	683b      	ldr	r3, [r7, #0]
 8000906:	685b      	ldr	r3, [r3, #4]
 8000908:	2203      	movs	r2, #3
 800090a:	401a      	ands	r2, r3
 800090c:	697b      	ldr	r3, [r7, #20]
 800090e:	005b      	lsls	r3, r3, #1
 8000910:	409a      	lsls	r2, r3
 8000912:	0013      	movs	r3, r2
 8000914:	693a      	ldr	r2, [r7, #16]
 8000916:	4313      	orrs	r3, r2
 8000918:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	693a      	ldr	r2, [r7, #16]
 800091e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000920:	683b      	ldr	r3, [r7, #0]
 8000922:	685b      	ldr	r3, [r3, #4]
 8000924:	2b01      	cmp	r3, #1
 8000926:	d00b      	beq.n	8000940 <HAL_GPIO_Init+0xd4>
 8000928:	683b      	ldr	r3, [r7, #0]
 800092a:	685b      	ldr	r3, [r3, #4]
 800092c:	2b02      	cmp	r3, #2
 800092e:	d007      	beq.n	8000940 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000930:	683b      	ldr	r3, [r7, #0]
 8000932:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000934:	2b11      	cmp	r3, #17
 8000936:	d003      	beq.n	8000940 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000938:	683b      	ldr	r3, [r7, #0]
 800093a:	685b      	ldr	r3, [r3, #4]
 800093c:	2b12      	cmp	r3, #18
 800093e:	d130      	bne.n	80009a2 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	689b      	ldr	r3, [r3, #8]
 8000944:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000946:	697b      	ldr	r3, [r7, #20]
 8000948:	005b      	lsls	r3, r3, #1
 800094a:	2203      	movs	r2, #3
 800094c:	409a      	lsls	r2, r3
 800094e:	0013      	movs	r3, r2
 8000950:	43da      	mvns	r2, r3
 8000952:	693b      	ldr	r3, [r7, #16]
 8000954:	4013      	ands	r3, r2
 8000956:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000958:	683b      	ldr	r3, [r7, #0]
 800095a:	68da      	ldr	r2, [r3, #12]
 800095c:	697b      	ldr	r3, [r7, #20]
 800095e:	005b      	lsls	r3, r3, #1
 8000960:	409a      	lsls	r2, r3
 8000962:	0013      	movs	r3, r2
 8000964:	693a      	ldr	r2, [r7, #16]
 8000966:	4313      	orrs	r3, r2
 8000968:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	693a      	ldr	r2, [r7, #16]
 800096e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	685b      	ldr	r3, [r3, #4]
 8000974:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000976:	2201      	movs	r2, #1
 8000978:	697b      	ldr	r3, [r7, #20]
 800097a:	409a      	lsls	r2, r3
 800097c:	0013      	movs	r3, r2
 800097e:	43da      	mvns	r2, r3
 8000980:	693b      	ldr	r3, [r7, #16]
 8000982:	4013      	ands	r3, r2
 8000984:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000986:	683b      	ldr	r3, [r7, #0]
 8000988:	685b      	ldr	r3, [r3, #4]
 800098a:	091b      	lsrs	r3, r3, #4
 800098c:	2201      	movs	r2, #1
 800098e:	401a      	ands	r2, r3
 8000990:	697b      	ldr	r3, [r7, #20]
 8000992:	409a      	lsls	r2, r3
 8000994:	0013      	movs	r3, r2
 8000996:	693a      	ldr	r2, [r7, #16]
 8000998:	4313      	orrs	r3, r2
 800099a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	693a      	ldr	r2, [r7, #16]
 80009a0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	68db      	ldr	r3, [r3, #12]
 80009a6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80009a8:	697b      	ldr	r3, [r7, #20]
 80009aa:	005b      	lsls	r3, r3, #1
 80009ac:	2203      	movs	r2, #3
 80009ae:	409a      	lsls	r2, r3
 80009b0:	0013      	movs	r3, r2
 80009b2:	43da      	mvns	r2, r3
 80009b4:	693b      	ldr	r3, [r7, #16]
 80009b6:	4013      	ands	r3, r2
 80009b8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80009ba:	683b      	ldr	r3, [r7, #0]
 80009bc:	689a      	ldr	r2, [r3, #8]
 80009be:	697b      	ldr	r3, [r7, #20]
 80009c0:	005b      	lsls	r3, r3, #1
 80009c2:	409a      	lsls	r2, r3
 80009c4:	0013      	movs	r3, r2
 80009c6:	693a      	ldr	r2, [r7, #16]
 80009c8:	4313      	orrs	r3, r2
 80009ca:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	693a      	ldr	r2, [r7, #16]
 80009d0:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80009d2:	683b      	ldr	r3, [r7, #0]
 80009d4:	685a      	ldr	r2, [r3, #4]
 80009d6:	2380      	movs	r3, #128	; 0x80
 80009d8:	055b      	lsls	r3, r3, #21
 80009da:	4013      	ands	r3, r2
 80009dc:	d100      	bne.n	80009e0 <HAL_GPIO_Init+0x174>
 80009de:	e09a      	b.n	8000b16 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009e0:	4b54      	ldr	r3, [pc, #336]	; (8000b34 <HAL_GPIO_Init+0x2c8>)
 80009e2:	699a      	ldr	r2, [r3, #24]
 80009e4:	4b53      	ldr	r3, [pc, #332]	; (8000b34 <HAL_GPIO_Init+0x2c8>)
 80009e6:	2101      	movs	r1, #1
 80009e8:	430a      	orrs	r2, r1
 80009ea:	619a      	str	r2, [r3, #24]
 80009ec:	4b51      	ldr	r3, [pc, #324]	; (8000b34 <HAL_GPIO_Init+0x2c8>)
 80009ee:	699b      	ldr	r3, [r3, #24]
 80009f0:	2201      	movs	r2, #1
 80009f2:	4013      	ands	r3, r2
 80009f4:	60bb      	str	r3, [r7, #8]
 80009f6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80009f8:	4a4f      	ldr	r2, [pc, #316]	; (8000b38 <HAL_GPIO_Init+0x2cc>)
 80009fa:	697b      	ldr	r3, [r7, #20]
 80009fc:	089b      	lsrs	r3, r3, #2
 80009fe:	3302      	adds	r3, #2
 8000a00:	009b      	lsls	r3, r3, #2
 8000a02:	589b      	ldr	r3, [r3, r2]
 8000a04:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000a06:	697b      	ldr	r3, [r7, #20]
 8000a08:	2203      	movs	r2, #3
 8000a0a:	4013      	ands	r3, r2
 8000a0c:	009b      	lsls	r3, r3, #2
 8000a0e:	220f      	movs	r2, #15
 8000a10:	409a      	lsls	r2, r3
 8000a12:	0013      	movs	r3, r2
 8000a14:	43da      	mvns	r2, r3
 8000a16:	693b      	ldr	r3, [r7, #16]
 8000a18:	4013      	ands	r3, r2
 8000a1a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000a1c:	687a      	ldr	r2, [r7, #4]
 8000a1e:	2390      	movs	r3, #144	; 0x90
 8000a20:	05db      	lsls	r3, r3, #23
 8000a22:	429a      	cmp	r2, r3
 8000a24:	d013      	beq.n	8000a4e <HAL_GPIO_Init+0x1e2>
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	4a44      	ldr	r2, [pc, #272]	; (8000b3c <HAL_GPIO_Init+0x2d0>)
 8000a2a:	4293      	cmp	r3, r2
 8000a2c:	d00d      	beq.n	8000a4a <HAL_GPIO_Init+0x1de>
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	4a43      	ldr	r2, [pc, #268]	; (8000b40 <HAL_GPIO_Init+0x2d4>)
 8000a32:	4293      	cmp	r3, r2
 8000a34:	d007      	beq.n	8000a46 <HAL_GPIO_Init+0x1da>
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	4a42      	ldr	r2, [pc, #264]	; (8000b44 <HAL_GPIO_Init+0x2d8>)
 8000a3a:	4293      	cmp	r3, r2
 8000a3c:	d101      	bne.n	8000a42 <HAL_GPIO_Init+0x1d6>
 8000a3e:	2303      	movs	r3, #3
 8000a40:	e006      	b.n	8000a50 <HAL_GPIO_Init+0x1e4>
 8000a42:	2305      	movs	r3, #5
 8000a44:	e004      	b.n	8000a50 <HAL_GPIO_Init+0x1e4>
 8000a46:	2302      	movs	r3, #2
 8000a48:	e002      	b.n	8000a50 <HAL_GPIO_Init+0x1e4>
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	e000      	b.n	8000a50 <HAL_GPIO_Init+0x1e4>
 8000a4e:	2300      	movs	r3, #0
 8000a50:	697a      	ldr	r2, [r7, #20]
 8000a52:	2103      	movs	r1, #3
 8000a54:	400a      	ands	r2, r1
 8000a56:	0092      	lsls	r2, r2, #2
 8000a58:	4093      	lsls	r3, r2
 8000a5a:	693a      	ldr	r2, [r7, #16]
 8000a5c:	4313      	orrs	r3, r2
 8000a5e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000a60:	4935      	ldr	r1, [pc, #212]	; (8000b38 <HAL_GPIO_Init+0x2cc>)
 8000a62:	697b      	ldr	r3, [r7, #20]
 8000a64:	089b      	lsrs	r3, r3, #2
 8000a66:	3302      	adds	r3, #2
 8000a68:	009b      	lsls	r3, r3, #2
 8000a6a:	693a      	ldr	r2, [r7, #16]
 8000a6c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a6e:	4b36      	ldr	r3, [pc, #216]	; (8000b48 <HAL_GPIO_Init+0x2dc>)
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	43da      	mvns	r2, r3
 8000a78:	693b      	ldr	r3, [r7, #16]
 8000a7a:	4013      	ands	r3, r2
 8000a7c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a7e:	683b      	ldr	r3, [r7, #0]
 8000a80:	685a      	ldr	r2, [r3, #4]
 8000a82:	2380      	movs	r3, #128	; 0x80
 8000a84:	025b      	lsls	r3, r3, #9
 8000a86:	4013      	ands	r3, r2
 8000a88:	d003      	beq.n	8000a92 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8000a8a:	693a      	ldr	r2, [r7, #16]
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	4313      	orrs	r3, r2
 8000a90:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000a92:	4b2d      	ldr	r3, [pc, #180]	; (8000b48 <HAL_GPIO_Init+0x2dc>)
 8000a94:	693a      	ldr	r2, [r7, #16]
 8000a96:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000a98:	4b2b      	ldr	r3, [pc, #172]	; (8000b48 <HAL_GPIO_Init+0x2dc>)
 8000a9a:	685b      	ldr	r3, [r3, #4]
 8000a9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	43da      	mvns	r2, r3
 8000aa2:	693b      	ldr	r3, [r7, #16]
 8000aa4:	4013      	ands	r3, r2
 8000aa6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000aa8:	683b      	ldr	r3, [r7, #0]
 8000aaa:	685a      	ldr	r2, [r3, #4]
 8000aac:	2380      	movs	r3, #128	; 0x80
 8000aae:	029b      	lsls	r3, r3, #10
 8000ab0:	4013      	ands	r3, r2
 8000ab2:	d003      	beq.n	8000abc <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8000ab4:	693a      	ldr	r2, [r7, #16]
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	4313      	orrs	r3, r2
 8000aba:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000abc:	4b22      	ldr	r3, [pc, #136]	; (8000b48 <HAL_GPIO_Init+0x2dc>)
 8000abe:	693a      	ldr	r2, [r7, #16]
 8000ac0:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ac2:	4b21      	ldr	r3, [pc, #132]	; (8000b48 <HAL_GPIO_Init+0x2dc>)
 8000ac4:	689b      	ldr	r3, [r3, #8]
 8000ac6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	43da      	mvns	r2, r3
 8000acc:	693b      	ldr	r3, [r7, #16]
 8000ace:	4013      	ands	r3, r2
 8000ad0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ad2:	683b      	ldr	r3, [r7, #0]
 8000ad4:	685a      	ldr	r2, [r3, #4]
 8000ad6:	2380      	movs	r3, #128	; 0x80
 8000ad8:	035b      	lsls	r3, r3, #13
 8000ada:	4013      	ands	r3, r2
 8000adc:	d003      	beq.n	8000ae6 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8000ade:	693a      	ldr	r2, [r7, #16]
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	4313      	orrs	r3, r2
 8000ae4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000ae6:	4b18      	ldr	r3, [pc, #96]	; (8000b48 <HAL_GPIO_Init+0x2dc>)
 8000ae8:	693a      	ldr	r2, [r7, #16]
 8000aea:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000aec:	4b16      	ldr	r3, [pc, #88]	; (8000b48 <HAL_GPIO_Init+0x2dc>)
 8000aee:	68db      	ldr	r3, [r3, #12]
 8000af0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000af2:	68fb      	ldr	r3, [r7, #12]
 8000af4:	43da      	mvns	r2, r3
 8000af6:	693b      	ldr	r3, [r7, #16]
 8000af8:	4013      	ands	r3, r2
 8000afa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000afc:	683b      	ldr	r3, [r7, #0]
 8000afe:	685a      	ldr	r2, [r3, #4]
 8000b00:	2380      	movs	r3, #128	; 0x80
 8000b02:	039b      	lsls	r3, r3, #14
 8000b04:	4013      	ands	r3, r2
 8000b06:	d003      	beq.n	8000b10 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8000b08:	693a      	ldr	r2, [r7, #16]
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	4313      	orrs	r3, r2
 8000b0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000b10:	4b0d      	ldr	r3, [pc, #52]	; (8000b48 <HAL_GPIO_Init+0x2dc>)
 8000b12:	693a      	ldr	r2, [r7, #16]
 8000b14:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8000b16:	697b      	ldr	r3, [r7, #20]
 8000b18:	3301      	adds	r3, #1
 8000b1a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b1c:	683b      	ldr	r3, [r7, #0]
 8000b1e:	681a      	ldr	r2, [r3, #0]
 8000b20:	697b      	ldr	r3, [r7, #20]
 8000b22:	40da      	lsrs	r2, r3
 8000b24:	1e13      	subs	r3, r2, #0
 8000b26:	d000      	beq.n	8000b2a <HAL_GPIO_Init+0x2be>
 8000b28:	e6a8      	b.n	800087c <HAL_GPIO_Init+0x10>
  } 
}
 8000b2a:	46c0      	nop			; (mov r8, r8)
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	b006      	add	sp, #24
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	46c0      	nop			; (mov r8, r8)
 8000b34:	40021000 	.word	0x40021000
 8000b38:	40010000 	.word	0x40010000
 8000b3c:	48000400 	.word	0x48000400
 8000b40:	48000800 	.word	0x48000800
 8000b44:	48000c00 	.word	0x48000c00
 8000b48:	40010400 	.word	0x40010400

08000b4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
 8000b54:	0008      	movs	r0, r1
 8000b56:	0011      	movs	r1, r2
 8000b58:	1cbb      	adds	r3, r7, #2
 8000b5a:	1c02      	adds	r2, r0, #0
 8000b5c:	801a      	strh	r2, [r3, #0]
 8000b5e:	1c7b      	adds	r3, r7, #1
 8000b60:	1c0a      	adds	r2, r1, #0
 8000b62:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000b64:	1c7b      	adds	r3, r7, #1
 8000b66:	781b      	ldrb	r3, [r3, #0]
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d004      	beq.n	8000b76 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000b6c:	1cbb      	adds	r3, r7, #2
 8000b6e:	881a      	ldrh	r2, [r3, #0]
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000b74:	e003      	b.n	8000b7e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000b76:	1cbb      	adds	r3, r7, #2
 8000b78:	881a      	ldrh	r2, [r3, #0]
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000b7e:	46c0      	nop			; (mov r8, r8)
 8000b80:	46bd      	mov	sp, r7
 8000b82:	b002      	add	sp, #8
 8000b84:	bd80      	pop	{r7, pc}
	...

08000b88 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b082      	sub	sp, #8
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d101      	bne.n	8000b9a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000b96:	2301      	movs	r3, #1
 8000b98:	e082      	b.n	8000ca0 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	2241      	movs	r2, #65	; 0x41
 8000b9e:	5c9b      	ldrb	r3, [r3, r2]
 8000ba0:	b2db      	uxtb	r3, r3
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d107      	bne.n	8000bb6 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	2240      	movs	r2, #64	; 0x40
 8000baa:	2100      	movs	r1, #0
 8000bac:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	0018      	movs	r0, r3
 8000bb2:	f7ff fc8b 	bl	80004cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	2241      	movs	r2, #65	; 0x41
 8000bba:	2124      	movs	r1, #36	; 0x24
 8000bbc:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	681a      	ldr	r2, [r3, #0]
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	2101      	movs	r1, #1
 8000bca:	438a      	bics	r2, r1
 8000bcc:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	685a      	ldr	r2, [r3, #4]
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	4934      	ldr	r1, [pc, #208]	; (8000ca8 <HAL_I2C_Init+0x120>)
 8000bd8:	400a      	ands	r2, r1
 8000bda:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	689a      	ldr	r2, [r3, #8]
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	4931      	ldr	r1, [pc, #196]	; (8000cac <HAL_I2C_Init+0x124>)
 8000be8:	400a      	ands	r2, r1
 8000bea:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	68db      	ldr	r3, [r3, #12]
 8000bf0:	2b01      	cmp	r3, #1
 8000bf2:	d108      	bne.n	8000c06 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	689a      	ldr	r2, [r3, #8]
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	2180      	movs	r1, #128	; 0x80
 8000bfe:	0209      	lsls	r1, r1, #8
 8000c00:	430a      	orrs	r2, r1
 8000c02:	609a      	str	r2, [r3, #8]
 8000c04:	e007      	b.n	8000c16 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	689a      	ldr	r2, [r3, #8]
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	2184      	movs	r1, #132	; 0x84
 8000c10:	0209      	lsls	r1, r1, #8
 8000c12:	430a      	orrs	r2, r1
 8000c14:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	68db      	ldr	r3, [r3, #12]
 8000c1a:	2b02      	cmp	r3, #2
 8000c1c:	d104      	bne.n	8000c28 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	2280      	movs	r2, #128	; 0x80
 8000c24:	0112      	lsls	r2, r2, #4
 8000c26:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	685a      	ldr	r2, [r3, #4]
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	491f      	ldr	r1, [pc, #124]	; (8000cb0 <HAL_I2C_Init+0x128>)
 8000c34:	430a      	orrs	r2, r1
 8000c36:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	68da      	ldr	r2, [r3, #12]
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	491a      	ldr	r1, [pc, #104]	; (8000cac <HAL_I2C_Init+0x124>)
 8000c44:	400a      	ands	r2, r1
 8000c46:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	691a      	ldr	r2, [r3, #16]
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	695b      	ldr	r3, [r3, #20]
 8000c50:	431a      	orrs	r2, r3
 8000c52:	0011      	movs	r1, r2
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	699b      	ldr	r3, [r3, #24]
 8000c58:	021a      	lsls	r2, r3, #8
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	430a      	orrs	r2, r1
 8000c60:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	69d9      	ldr	r1, [r3, #28]
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	6a1a      	ldr	r2, [r3, #32]
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	430a      	orrs	r2, r1
 8000c70:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	681a      	ldr	r2, [r3, #0]
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	2101      	movs	r1, #1
 8000c7e:	430a      	orrs	r2, r1
 8000c80:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	2200      	movs	r2, #0
 8000c86:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	2241      	movs	r2, #65	; 0x41
 8000c8c:	2120      	movs	r1, #32
 8000c8e:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	2200      	movs	r2, #0
 8000c94:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	2242      	movs	r2, #66	; 0x42
 8000c9a:	2100      	movs	r1, #0
 8000c9c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000c9e:	2300      	movs	r3, #0
}
 8000ca0:	0018      	movs	r0, r3
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	b002      	add	sp, #8
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	f0ffffff 	.word	0xf0ffffff
 8000cac:	ffff7fff 	.word	0xffff7fff
 8000cb0:	02008000 	.word	0x02008000

08000cb4 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b08a      	sub	sp, #40	; 0x28
 8000cb8:	af02      	add	r7, sp, #8
 8000cba:	60f8      	str	r0, [r7, #12]
 8000cbc:	607a      	str	r2, [r7, #4]
 8000cbe:	603b      	str	r3, [r7, #0]
 8000cc0:	230a      	movs	r3, #10
 8000cc2:	18fb      	adds	r3, r7, r3
 8000cc4:	1c0a      	adds	r2, r1, #0
 8000cc6:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	2241      	movs	r2, #65	; 0x41
 8000cd0:	5c9b      	ldrb	r3, [r3, r2]
 8000cd2:	b2db      	uxtb	r3, r3
 8000cd4:	2b20      	cmp	r3, #32
 8000cd6:	d000      	beq.n	8000cda <HAL_I2C_IsDeviceReady+0x26>
 8000cd8:	e0fe      	b.n	8000ed8 <HAL_I2C_IsDeviceReady+0x224>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	699a      	ldr	r2, [r3, #24]
 8000ce0:	2380      	movs	r3, #128	; 0x80
 8000ce2:	021b      	lsls	r3, r3, #8
 8000ce4:	401a      	ands	r2, r3
 8000ce6:	2380      	movs	r3, #128	; 0x80
 8000ce8:	021b      	lsls	r3, r3, #8
 8000cea:	429a      	cmp	r2, r3
 8000cec:	d101      	bne.n	8000cf2 <HAL_I2C_IsDeviceReady+0x3e>
    {
      return HAL_BUSY;
 8000cee:	2302      	movs	r3, #2
 8000cf0:	e0f3      	b.n	8000eda <HAL_I2C_IsDeviceReady+0x226>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	2240      	movs	r2, #64	; 0x40
 8000cf6:	5c9b      	ldrb	r3, [r3, r2]
 8000cf8:	2b01      	cmp	r3, #1
 8000cfa:	d101      	bne.n	8000d00 <HAL_I2C_IsDeviceReady+0x4c>
 8000cfc:	2302      	movs	r3, #2
 8000cfe:	e0ec      	b.n	8000eda <HAL_I2C_IsDeviceReady+0x226>
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	2240      	movs	r2, #64	; 0x40
 8000d04:	2101      	movs	r1, #1
 8000d06:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	2241      	movs	r2, #65	; 0x41
 8000d0c:	2124      	movs	r1, #36	; 0x24
 8000d0e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	2200      	movs	r2, #0
 8000d14:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	68db      	ldr	r3, [r3, #12]
 8000d1a:	2b01      	cmp	r3, #1
 8000d1c:	d107      	bne.n	8000d2e <HAL_I2C_IsDeviceReady+0x7a>
 8000d1e:	230a      	movs	r3, #10
 8000d20:	18fb      	adds	r3, r7, r3
 8000d22:	881b      	ldrh	r3, [r3, #0]
 8000d24:	059b      	lsls	r3, r3, #22
 8000d26:	0d9b      	lsrs	r3, r3, #22
 8000d28:	4a6e      	ldr	r2, [pc, #440]	; (8000ee4 <HAL_I2C_IsDeviceReady+0x230>)
 8000d2a:	431a      	orrs	r2, r3
 8000d2c:	e007      	b.n	8000d3e <HAL_I2C_IsDeviceReady+0x8a>
 8000d2e:	230a      	movs	r3, #10
 8000d30:	18fb      	adds	r3, r7, r3
 8000d32:	881b      	ldrh	r3, [r3, #0]
 8000d34:	059b      	lsls	r3, r3, #22
 8000d36:	0d9b      	lsrs	r3, r3, #22
 8000d38:	22a0      	movs	r2, #160	; 0xa0
 8000d3a:	0192      	lsls	r2, r2, #6
 8000d3c:	431a      	orrs	r2, r3
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	605a      	str	r2, [r3, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8000d44:	f7ff fcb2 	bl	80006ac <HAL_GetTick>
 8000d48:	0003      	movs	r3, r0
 8000d4a:	61bb      	str	r3, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	699b      	ldr	r3, [r3, #24]
 8000d52:	2220      	movs	r2, #32
 8000d54:	4013      	ands	r3, r2
 8000d56:	3b20      	subs	r3, #32
 8000d58:	425a      	negs	r2, r3
 8000d5a:	4153      	adcs	r3, r2
 8000d5c:	b2da      	uxtb	r2, r3
 8000d5e:	231f      	movs	r3, #31
 8000d60:	18fb      	adds	r3, r7, r3
 8000d62:	701a      	strb	r2, [r3, #0]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	699b      	ldr	r3, [r3, #24]
 8000d6a:	2210      	movs	r2, #16
 8000d6c:	4013      	ands	r3, r2
 8000d6e:	3b10      	subs	r3, #16
 8000d70:	425a      	negs	r2, r3
 8000d72:	4153      	adcs	r3, r2
 8000d74:	b2da      	uxtb	r2, r3
 8000d76:	231e      	movs	r3, #30
 8000d78:	18fb      	adds	r3, r7, r3
 8000d7a:	701a      	strb	r2, [r3, #0]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8000d7c:	e035      	b.n	8000dea <HAL_I2C_IsDeviceReady+0x136>
      {
        if (Timeout != HAL_MAX_DELAY)
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	3301      	adds	r3, #1
 8000d82:	d01a      	beq.n	8000dba <HAL_I2C_IsDeviceReady+0x106>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8000d84:	f7ff fc92 	bl	80006ac <HAL_GetTick>
 8000d88:	0002      	movs	r2, r0
 8000d8a:	69bb      	ldr	r3, [r7, #24]
 8000d8c:	1ad3      	subs	r3, r2, r3
 8000d8e:	683a      	ldr	r2, [r7, #0]
 8000d90:	429a      	cmp	r2, r3
 8000d92:	d302      	bcc.n	8000d9a <HAL_I2C_IsDeviceReady+0xe6>
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d10f      	bne.n	8000dba <HAL_I2C_IsDeviceReady+0x106>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	2241      	movs	r2, #65	; 0x41
 8000d9e:	2120      	movs	r1, #32
 8000da0:	5499      	strb	r1, [r3, r2]

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000da6:	2220      	movs	r2, #32
 8000da8:	431a      	orrs	r2, r3
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	2240      	movs	r2, #64	; 0x40
 8000db2:	2100      	movs	r1, #0
 8000db4:	5499      	strb	r1, [r3, r2]

            return HAL_ERROR;
 8000db6:	2301      	movs	r3, #1
 8000db8:	e08f      	b.n	8000eda <HAL_I2C_IsDeviceReady+0x226>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	699b      	ldr	r3, [r3, #24]
 8000dc0:	2220      	movs	r2, #32
 8000dc2:	4013      	ands	r3, r2
 8000dc4:	3b20      	subs	r3, #32
 8000dc6:	425a      	negs	r2, r3
 8000dc8:	4153      	adcs	r3, r2
 8000dca:	b2da      	uxtb	r2, r3
 8000dcc:	231f      	movs	r3, #31
 8000dce:	18fb      	adds	r3, r7, r3
 8000dd0:	701a      	strb	r2, [r3, #0]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	699b      	ldr	r3, [r3, #24]
 8000dd8:	2210      	movs	r2, #16
 8000dda:	4013      	ands	r3, r2
 8000ddc:	3b10      	subs	r3, #16
 8000dde:	425a      	negs	r2, r3
 8000de0:	4153      	adcs	r3, r2
 8000de2:	b2da      	uxtb	r2, r3
 8000de4:	231e      	movs	r3, #30
 8000de6:	18fb      	adds	r3, r7, r3
 8000de8:	701a      	strb	r2, [r3, #0]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8000dea:	231f      	movs	r3, #31
 8000dec:	18fb      	adds	r3, r7, r3
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d104      	bne.n	8000dfe <HAL_I2C_IsDeviceReady+0x14a>
 8000df4:	231e      	movs	r3, #30
 8000df6:	18fb      	adds	r3, r7, r3
 8000df8:	781b      	ldrb	r3, [r3, #0]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d0bf      	beq.n	8000d7e <HAL_I2C_IsDeviceReady+0xca>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	699b      	ldr	r3, [r3, #24]
 8000e04:	2210      	movs	r2, #16
 8000e06:	4013      	ands	r3, r2
 8000e08:	2b10      	cmp	r3, #16
 8000e0a:	d01a      	beq.n	8000e42 <HAL_I2C_IsDeviceReady+0x18e>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8000e0c:	683a      	ldr	r2, [r7, #0]
 8000e0e:	68f8      	ldr	r0, [r7, #12]
 8000e10:	69bb      	ldr	r3, [r7, #24]
 8000e12:	9300      	str	r3, [sp, #0]
 8000e14:	0013      	movs	r3, r2
 8000e16:	2200      	movs	r2, #0
 8000e18:	2120      	movs	r1, #32
 8000e1a:	f000 f865 	bl	8000ee8 <I2C_WaitOnFlagUntilTimeout>
 8000e1e:	1e03      	subs	r3, r0, #0
 8000e20:	d001      	beq.n	8000e26 <HAL_I2C_IsDeviceReady+0x172>
        {
          return HAL_ERROR;
 8000e22:	2301      	movs	r3, #1
 8000e24:	e059      	b.n	8000eda <HAL_I2C_IsDeviceReady+0x226>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	2220      	movs	r2, #32
 8000e2c:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	2241      	movs	r2, #65	; 0x41
 8000e32:	2120      	movs	r1, #32
 8000e34:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	2240      	movs	r2, #64	; 0x40
 8000e3a:	2100      	movs	r1, #0
 8000e3c:	5499      	strb	r1, [r3, r2]

        return HAL_OK;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	e04b      	b.n	8000eda <HAL_I2C_IsDeviceReady+0x226>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8000e42:	683a      	ldr	r2, [r7, #0]
 8000e44:	68f8      	ldr	r0, [r7, #12]
 8000e46:	69bb      	ldr	r3, [r7, #24]
 8000e48:	9300      	str	r3, [sp, #0]
 8000e4a:	0013      	movs	r3, r2
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	2120      	movs	r1, #32
 8000e50:	f000 f84a 	bl	8000ee8 <I2C_WaitOnFlagUntilTimeout>
 8000e54:	1e03      	subs	r3, r0, #0
 8000e56:	d001      	beq.n	8000e5c <HAL_I2C_IsDeviceReady+0x1a8>
        {
          return HAL_ERROR;
 8000e58:	2301      	movs	r3, #1
 8000e5a:	e03e      	b.n	8000eda <HAL_I2C_IsDeviceReady+0x226>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	2210      	movs	r2, #16
 8000e62:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	2220      	movs	r2, #32
 8000e6a:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8000e6c:	697b      	ldr	r3, [r7, #20]
 8000e6e:	687a      	ldr	r2, [r7, #4]
 8000e70:	429a      	cmp	r2, r3
 8000e72:	d119      	bne.n	8000ea8 <HAL_I2C_IsDeviceReady+0x1f4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	685a      	ldr	r2, [r3, #4]
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	2180      	movs	r1, #128	; 0x80
 8000e80:	01c9      	lsls	r1, r1, #7
 8000e82:	430a      	orrs	r2, r1
 8000e84:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8000e86:	683a      	ldr	r2, [r7, #0]
 8000e88:	68f8      	ldr	r0, [r7, #12]
 8000e8a:	69bb      	ldr	r3, [r7, #24]
 8000e8c:	9300      	str	r3, [sp, #0]
 8000e8e:	0013      	movs	r3, r2
 8000e90:	2200      	movs	r2, #0
 8000e92:	2120      	movs	r1, #32
 8000e94:	f000 f828 	bl	8000ee8 <I2C_WaitOnFlagUntilTimeout>
 8000e98:	1e03      	subs	r3, r0, #0
 8000e9a:	d001      	beq.n	8000ea0 <HAL_I2C_IsDeviceReady+0x1ec>
        {
          return HAL_ERROR;
 8000e9c:	2301      	movs	r3, #1
 8000e9e:	e01c      	b.n	8000eda <HAL_I2C_IsDeviceReady+0x226>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	2220      	movs	r2, #32
 8000ea6:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	3301      	adds	r3, #1
 8000eac:	617b      	str	r3, [r7, #20]
    }
    while (I2C_Trials < Trials);
 8000eae:	697b      	ldr	r3, [r7, #20]
 8000eb0:	687a      	ldr	r2, [r7, #4]
 8000eb2:	429a      	cmp	r2, r3
 8000eb4:	d900      	bls.n	8000eb8 <HAL_I2C_IsDeviceReady+0x204>
 8000eb6:	e72e      	b.n	8000d16 <HAL_I2C_IsDeviceReady+0x62>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	2241      	movs	r2, #65	; 0x41
 8000ebc:	2120      	movs	r1, #32
 8000ebe:	5499      	strb	r1, [r3, r2]

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ec4:	2220      	movs	r2, #32
 8000ec6:	431a      	orrs	r2, r3
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	2240      	movs	r2, #64	; 0x40
 8000ed0:	2100      	movs	r1, #0
 8000ed2:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	e000      	b.n	8000eda <HAL_I2C_IsDeviceReady+0x226>
  }
  else
  {
    return HAL_BUSY;
 8000ed8:	2302      	movs	r3, #2
  }
}
 8000eda:	0018      	movs	r0, r3
 8000edc:	46bd      	mov	sp, r7
 8000ede:	b008      	add	sp, #32
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	46c0      	nop			; (mov r8, r8)
 8000ee4:	02002000 	.word	0x02002000

08000ee8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b084      	sub	sp, #16
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	60f8      	str	r0, [r7, #12]
 8000ef0:	60b9      	str	r1, [r7, #8]
 8000ef2:	603b      	str	r3, [r7, #0]
 8000ef4:	1dfb      	adds	r3, r7, #7
 8000ef6:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8000ef8:	e021      	b.n	8000f3e <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	3301      	adds	r3, #1
 8000efe:	d01e      	beq.n	8000f3e <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000f00:	f7ff fbd4 	bl	80006ac <HAL_GetTick>
 8000f04:	0002      	movs	r2, r0
 8000f06:	69bb      	ldr	r3, [r7, #24]
 8000f08:	1ad3      	subs	r3, r2, r3
 8000f0a:	683a      	ldr	r2, [r7, #0]
 8000f0c:	429a      	cmp	r2, r3
 8000f0e:	d302      	bcc.n	8000f16 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d113      	bne.n	8000f3e <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f1a:	2220      	movs	r2, #32
 8000f1c:	431a      	orrs	r2, r3
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	2241      	movs	r2, #65	; 0x41
 8000f26:	2120      	movs	r1, #32
 8000f28:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	2242      	movs	r2, #66	; 0x42
 8000f2e:	2100      	movs	r1, #0
 8000f30:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	2240      	movs	r2, #64	; 0x40
 8000f36:	2100      	movs	r1, #0
 8000f38:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	e00f      	b.n	8000f5e <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	699b      	ldr	r3, [r3, #24]
 8000f44:	68ba      	ldr	r2, [r7, #8]
 8000f46:	4013      	ands	r3, r2
 8000f48:	68ba      	ldr	r2, [r7, #8]
 8000f4a:	1ad3      	subs	r3, r2, r3
 8000f4c:	425a      	negs	r2, r3
 8000f4e:	4153      	adcs	r3, r2
 8000f50:	b2db      	uxtb	r3, r3
 8000f52:	001a      	movs	r2, r3
 8000f54:	1dfb      	adds	r3, r7, #7
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	429a      	cmp	r2, r3
 8000f5a:	d0ce      	beq.n	8000efa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8000f5c:	2300      	movs	r3, #0
}
 8000f5e:	0018      	movs	r0, r3
 8000f60:	46bd      	mov	sp, r7
 8000f62:	b004      	add	sp, #16
 8000f64:	bd80      	pop	{r7, pc}
	...

08000f68 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
 8000f70:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	2241      	movs	r2, #65	; 0x41
 8000f76:	5c9b      	ldrb	r3, [r3, r2]
 8000f78:	b2db      	uxtb	r3, r3
 8000f7a:	2b20      	cmp	r3, #32
 8000f7c:	d138      	bne.n	8000ff0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	2240      	movs	r2, #64	; 0x40
 8000f82:	5c9b      	ldrb	r3, [r3, r2]
 8000f84:	2b01      	cmp	r3, #1
 8000f86:	d101      	bne.n	8000f8c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8000f88:	2302      	movs	r3, #2
 8000f8a:	e032      	b.n	8000ff2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	2240      	movs	r2, #64	; 0x40
 8000f90:	2101      	movs	r1, #1
 8000f92:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	2241      	movs	r2, #65	; 0x41
 8000f98:	2124      	movs	r1, #36	; 0x24
 8000f9a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	681a      	ldr	r2, [r3, #0]
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	2101      	movs	r1, #1
 8000fa8:	438a      	bics	r2, r1
 8000faa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	681a      	ldr	r2, [r3, #0]
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	4911      	ldr	r1, [pc, #68]	; (8000ffc <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8000fb8:	400a      	ands	r2, r1
 8000fba:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	6819      	ldr	r1, [r3, #0]
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	683a      	ldr	r2, [r7, #0]
 8000fc8:	430a      	orrs	r2, r1
 8000fca:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	681a      	ldr	r2, [r3, #0]
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	2101      	movs	r1, #1
 8000fd8:	430a      	orrs	r2, r1
 8000fda:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	2241      	movs	r2, #65	; 0x41
 8000fe0:	2120      	movs	r1, #32
 8000fe2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	2240      	movs	r2, #64	; 0x40
 8000fe8:	2100      	movs	r1, #0
 8000fea:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8000fec:	2300      	movs	r3, #0
 8000fee:	e000      	b.n	8000ff2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8000ff0:	2302      	movs	r3, #2
  }
}
 8000ff2:	0018      	movs	r0, r3
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	b002      	add	sp, #8
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	46c0      	nop			; (mov r8, r8)
 8000ffc:	ffffefff 	.word	0xffffefff

08001000 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b084      	sub	sp, #16
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
 8001008:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	2241      	movs	r2, #65	; 0x41
 800100e:	5c9b      	ldrb	r3, [r3, r2]
 8001010:	b2db      	uxtb	r3, r3
 8001012:	2b20      	cmp	r3, #32
 8001014:	d139      	bne.n	800108a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	2240      	movs	r2, #64	; 0x40
 800101a:	5c9b      	ldrb	r3, [r3, r2]
 800101c:	2b01      	cmp	r3, #1
 800101e:	d101      	bne.n	8001024 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001020:	2302      	movs	r3, #2
 8001022:	e033      	b.n	800108c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	2240      	movs	r2, #64	; 0x40
 8001028:	2101      	movs	r1, #1
 800102a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	2241      	movs	r2, #65	; 0x41
 8001030:	2124      	movs	r1, #36	; 0x24
 8001032:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	681a      	ldr	r2, [r3, #0]
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	2101      	movs	r1, #1
 8001040:	438a      	bics	r2, r1
 8001042:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	4a11      	ldr	r2, [pc, #68]	; (8001094 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001050:	4013      	ands	r3, r2
 8001052:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	021b      	lsls	r3, r3, #8
 8001058:	68fa      	ldr	r2, [r7, #12]
 800105a:	4313      	orrs	r3, r2
 800105c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	68fa      	ldr	r2, [r7, #12]
 8001064:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	681a      	ldr	r2, [r3, #0]
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	2101      	movs	r1, #1
 8001072:	430a      	orrs	r2, r1
 8001074:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	2241      	movs	r2, #65	; 0x41
 800107a:	2120      	movs	r1, #32
 800107c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	2240      	movs	r2, #64	; 0x40
 8001082:	2100      	movs	r1, #0
 8001084:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001086:	2300      	movs	r3, #0
 8001088:	e000      	b.n	800108c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800108a:	2302      	movs	r3, #2
  }
}
 800108c:	0018      	movs	r0, r3
 800108e:	46bd      	mov	sp, r7
 8001090:	b004      	add	sp, #16
 8001092:	bd80      	pop	{r7, pc}
 8001094:	fffff0ff 	.word	0xfffff0ff

08001098 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b088      	sub	sp, #32
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d101      	bne.n	80010aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80010a6:	2301      	movs	r3, #1
 80010a8:	e305      	b.n	80016b6 <HAL_RCC_OscConfig+0x61e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	2201      	movs	r2, #1
 80010b0:	4013      	ands	r3, r2
 80010b2:	d100      	bne.n	80010b6 <HAL_RCC_OscConfig+0x1e>
 80010b4:	e08d      	b.n	80011d2 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80010b6:	4bc5      	ldr	r3, [pc, #788]	; (80013cc <HAL_RCC_OscConfig+0x334>)
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	220c      	movs	r2, #12
 80010bc:	4013      	ands	r3, r2
 80010be:	2b04      	cmp	r3, #4
 80010c0:	d00e      	beq.n	80010e0 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80010c2:	4bc2      	ldr	r3, [pc, #776]	; (80013cc <HAL_RCC_OscConfig+0x334>)
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	220c      	movs	r2, #12
 80010c8:	4013      	ands	r3, r2
 80010ca:	2b08      	cmp	r3, #8
 80010cc:	d116      	bne.n	80010fc <HAL_RCC_OscConfig+0x64>
 80010ce:	4bbf      	ldr	r3, [pc, #764]	; (80013cc <HAL_RCC_OscConfig+0x334>)
 80010d0:	685a      	ldr	r2, [r3, #4]
 80010d2:	23c0      	movs	r3, #192	; 0xc0
 80010d4:	025b      	lsls	r3, r3, #9
 80010d6:	401a      	ands	r2, r3
 80010d8:	2380      	movs	r3, #128	; 0x80
 80010da:	025b      	lsls	r3, r3, #9
 80010dc:	429a      	cmp	r2, r3
 80010de:	d10d      	bne.n	80010fc <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010e0:	4bba      	ldr	r3, [pc, #744]	; (80013cc <HAL_RCC_OscConfig+0x334>)
 80010e2:	681a      	ldr	r2, [r3, #0]
 80010e4:	2380      	movs	r3, #128	; 0x80
 80010e6:	029b      	lsls	r3, r3, #10
 80010e8:	4013      	ands	r3, r2
 80010ea:	d100      	bne.n	80010ee <HAL_RCC_OscConfig+0x56>
 80010ec:	e070      	b.n	80011d0 <HAL_RCC_OscConfig+0x138>
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d000      	beq.n	80010f8 <HAL_RCC_OscConfig+0x60>
 80010f6:	e06b      	b.n	80011d0 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80010f8:	2301      	movs	r3, #1
 80010fa:	e2dc      	b.n	80016b6 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	2b01      	cmp	r3, #1
 8001102:	d107      	bne.n	8001114 <HAL_RCC_OscConfig+0x7c>
 8001104:	4bb1      	ldr	r3, [pc, #708]	; (80013cc <HAL_RCC_OscConfig+0x334>)
 8001106:	681a      	ldr	r2, [r3, #0]
 8001108:	4bb0      	ldr	r3, [pc, #704]	; (80013cc <HAL_RCC_OscConfig+0x334>)
 800110a:	2180      	movs	r1, #128	; 0x80
 800110c:	0249      	lsls	r1, r1, #9
 800110e:	430a      	orrs	r2, r1
 8001110:	601a      	str	r2, [r3, #0]
 8001112:	e02f      	b.n	8001174 <HAL_RCC_OscConfig+0xdc>
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	2b00      	cmp	r3, #0
 800111a:	d10c      	bne.n	8001136 <HAL_RCC_OscConfig+0x9e>
 800111c:	4bab      	ldr	r3, [pc, #684]	; (80013cc <HAL_RCC_OscConfig+0x334>)
 800111e:	681a      	ldr	r2, [r3, #0]
 8001120:	4baa      	ldr	r3, [pc, #680]	; (80013cc <HAL_RCC_OscConfig+0x334>)
 8001122:	49ab      	ldr	r1, [pc, #684]	; (80013d0 <HAL_RCC_OscConfig+0x338>)
 8001124:	400a      	ands	r2, r1
 8001126:	601a      	str	r2, [r3, #0]
 8001128:	4ba8      	ldr	r3, [pc, #672]	; (80013cc <HAL_RCC_OscConfig+0x334>)
 800112a:	681a      	ldr	r2, [r3, #0]
 800112c:	4ba7      	ldr	r3, [pc, #668]	; (80013cc <HAL_RCC_OscConfig+0x334>)
 800112e:	49a9      	ldr	r1, [pc, #676]	; (80013d4 <HAL_RCC_OscConfig+0x33c>)
 8001130:	400a      	ands	r2, r1
 8001132:	601a      	str	r2, [r3, #0]
 8001134:	e01e      	b.n	8001174 <HAL_RCC_OscConfig+0xdc>
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	2b05      	cmp	r3, #5
 800113c:	d10e      	bne.n	800115c <HAL_RCC_OscConfig+0xc4>
 800113e:	4ba3      	ldr	r3, [pc, #652]	; (80013cc <HAL_RCC_OscConfig+0x334>)
 8001140:	681a      	ldr	r2, [r3, #0]
 8001142:	4ba2      	ldr	r3, [pc, #648]	; (80013cc <HAL_RCC_OscConfig+0x334>)
 8001144:	2180      	movs	r1, #128	; 0x80
 8001146:	02c9      	lsls	r1, r1, #11
 8001148:	430a      	orrs	r2, r1
 800114a:	601a      	str	r2, [r3, #0]
 800114c:	4b9f      	ldr	r3, [pc, #636]	; (80013cc <HAL_RCC_OscConfig+0x334>)
 800114e:	681a      	ldr	r2, [r3, #0]
 8001150:	4b9e      	ldr	r3, [pc, #632]	; (80013cc <HAL_RCC_OscConfig+0x334>)
 8001152:	2180      	movs	r1, #128	; 0x80
 8001154:	0249      	lsls	r1, r1, #9
 8001156:	430a      	orrs	r2, r1
 8001158:	601a      	str	r2, [r3, #0]
 800115a:	e00b      	b.n	8001174 <HAL_RCC_OscConfig+0xdc>
 800115c:	4b9b      	ldr	r3, [pc, #620]	; (80013cc <HAL_RCC_OscConfig+0x334>)
 800115e:	681a      	ldr	r2, [r3, #0]
 8001160:	4b9a      	ldr	r3, [pc, #616]	; (80013cc <HAL_RCC_OscConfig+0x334>)
 8001162:	499b      	ldr	r1, [pc, #620]	; (80013d0 <HAL_RCC_OscConfig+0x338>)
 8001164:	400a      	ands	r2, r1
 8001166:	601a      	str	r2, [r3, #0]
 8001168:	4b98      	ldr	r3, [pc, #608]	; (80013cc <HAL_RCC_OscConfig+0x334>)
 800116a:	681a      	ldr	r2, [r3, #0]
 800116c:	4b97      	ldr	r3, [pc, #604]	; (80013cc <HAL_RCC_OscConfig+0x334>)
 800116e:	4999      	ldr	r1, [pc, #612]	; (80013d4 <HAL_RCC_OscConfig+0x33c>)
 8001170:	400a      	ands	r2, r1
 8001172:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d014      	beq.n	80011a6 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800117c:	f7ff fa96 	bl	80006ac <HAL_GetTick>
 8001180:	0003      	movs	r3, r0
 8001182:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001184:	e008      	b.n	8001198 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001186:	f7ff fa91 	bl	80006ac <HAL_GetTick>
 800118a:	0002      	movs	r2, r0
 800118c:	69bb      	ldr	r3, [r7, #24]
 800118e:	1ad3      	subs	r3, r2, r3
 8001190:	2b64      	cmp	r3, #100	; 0x64
 8001192:	d901      	bls.n	8001198 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001194:	2303      	movs	r3, #3
 8001196:	e28e      	b.n	80016b6 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001198:	4b8c      	ldr	r3, [pc, #560]	; (80013cc <HAL_RCC_OscConfig+0x334>)
 800119a:	681a      	ldr	r2, [r3, #0]
 800119c:	2380      	movs	r3, #128	; 0x80
 800119e:	029b      	lsls	r3, r3, #10
 80011a0:	4013      	ands	r3, r2
 80011a2:	d0f0      	beq.n	8001186 <HAL_RCC_OscConfig+0xee>
 80011a4:	e015      	b.n	80011d2 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011a6:	f7ff fa81 	bl	80006ac <HAL_GetTick>
 80011aa:	0003      	movs	r3, r0
 80011ac:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011ae:	e008      	b.n	80011c2 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011b0:	f7ff fa7c 	bl	80006ac <HAL_GetTick>
 80011b4:	0002      	movs	r2, r0
 80011b6:	69bb      	ldr	r3, [r7, #24]
 80011b8:	1ad3      	subs	r3, r2, r3
 80011ba:	2b64      	cmp	r3, #100	; 0x64
 80011bc:	d901      	bls.n	80011c2 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80011be:	2303      	movs	r3, #3
 80011c0:	e279      	b.n	80016b6 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011c2:	4b82      	ldr	r3, [pc, #520]	; (80013cc <HAL_RCC_OscConfig+0x334>)
 80011c4:	681a      	ldr	r2, [r3, #0]
 80011c6:	2380      	movs	r3, #128	; 0x80
 80011c8:	029b      	lsls	r3, r3, #10
 80011ca:	4013      	ands	r3, r2
 80011cc:	d1f0      	bne.n	80011b0 <HAL_RCC_OscConfig+0x118>
 80011ce:	e000      	b.n	80011d2 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011d0:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	2202      	movs	r2, #2
 80011d8:	4013      	ands	r3, r2
 80011da:	d100      	bne.n	80011de <HAL_RCC_OscConfig+0x146>
 80011dc:	e06c      	b.n	80012b8 <HAL_RCC_OscConfig+0x220>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80011de:	4b7b      	ldr	r3, [pc, #492]	; (80013cc <HAL_RCC_OscConfig+0x334>)
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	220c      	movs	r2, #12
 80011e4:	4013      	ands	r3, r2
 80011e6:	d00e      	beq.n	8001206 <HAL_RCC_OscConfig+0x16e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80011e8:	4b78      	ldr	r3, [pc, #480]	; (80013cc <HAL_RCC_OscConfig+0x334>)
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	220c      	movs	r2, #12
 80011ee:	4013      	ands	r3, r2
 80011f0:	2b08      	cmp	r3, #8
 80011f2:	d11f      	bne.n	8001234 <HAL_RCC_OscConfig+0x19c>
 80011f4:	4b75      	ldr	r3, [pc, #468]	; (80013cc <HAL_RCC_OscConfig+0x334>)
 80011f6:	685a      	ldr	r2, [r3, #4]
 80011f8:	23c0      	movs	r3, #192	; 0xc0
 80011fa:	025b      	lsls	r3, r3, #9
 80011fc:	401a      	ands	r2, r3
 80011fe:	2380      	movs	r3, #128	; 0x80
 8001200:	021b      	lsls	r3, r3, #8
 8001202:	429a      	cmp	r2, r3
 8001204:	d116      	bne.n	8001234 <HAL_RCC_OscConfig+0x19c>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001206:	4b71      	ldr	r3, [pc, #452]	; (80013cc <HAL_RCC_OscConfig+0x334>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	2202      	movs	r2, #2
 800120c:	4013      	ands	r3, r2
 800120e:	d005      	beq.n	800121c <HAL_RCC_OscConfig+0x184>
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	68db      	ldr	r3, [r3, #12]
 8001214:	2b01      	cmp	r3, #1
 8001216:	d001      	beq.n	800121c <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 8001218:	2301      	movs	r3, #1
 800121a:	e24c      	b.n	80016b6 <HAL_RCC_OscConfig+0x61e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800121c:	4b6b      	ldr	r3, [pc, #428]	; (80013cc <HAL_RCC_OscConfig+0x334>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	22f8      	movs	r2, #248	; 0xf8
 8001222:	4393      	bics	r3, r2
 8001224:	0019      	movs	r1, r3
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	691b      	ldr	r3, [r3, #16]
 800122a:	00da      	lsls	r2, r3, #3
 800122c:	4b67      	ldr	r3, [pc, #412]	; (80013cc <HAL_RCC_OscConfig+0x334>)
 800122e:	430a      	orrs	r2, r1
 8001230:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001232:	e041      	b.n	80012b8 <HAL_RCC_OscConfig+0x220>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	68db      	ldr	r3, [r3, #12]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d024      	beq.n	8001286 <HAL_RCC_OscConfig+0x1ee>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800123c:	4b63      	ldr	r3, [pc, #396]	; (80013cc <HAL_RCC_OscConfig+0x334>)
 800123e:	681a      	ldr	r2, [r3, #0]
 8001240:	4b62      	ldr	r3, [pc, #392]	; (80013cc <HAL_RCC_OscConfig+0x334>)
 8001242:	2101      	movs	r1, #1
 8001244:	430a      	orrs	r2, r1
 8001246:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001248:	f7ff fa30 	bl	80006ac <HAL_GetTick>
 800124c:	0003      	movs	r3, r0
 800124e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001250:	e008      	b.n	8001264 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001252:	f7ff fa2b 	bl	80006ac <HAL_GetTick>
 8001256:	0002      	movs	r2, r0
 8001258:	69bb      	ldr	r3, [r7, #24]
 800125a:	1ad3      	subs	r3, r2, r3
 800125c:	2b02      	cmp	r3, #2
 800125e:	d901      	bls.n	8001264 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8001260:	2303      	movs	r3, #3
 8001262:	e228      	b.n	80016b6 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001264:	4b59      	ldr	r3, [pc, #356]	; (80013cc <HAL_RCC_OscConfig+0x334>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	2202      	movs	r2, #2
 800126a:	4013      	ands	r3, r2
 800126c:	d0f1      	beq.n	8001252 <HAL_RCC_OscConfig+0x1ba>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800126e:	4b57      	ldr	r3, [pc, #348]	; (80013cc <HAL_RCC_OscConfig+0x334>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	22f8      	movs	r2, #248	; 0xf8
 8001274:	4393      	bics	r3, r2
 8001276:	0019      	movs	r1, r3
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	691b      	ldr	r3, [r3, #16]
 800127c:	00da      	lsls	r2, r3, #3
 800127e:	4b53      	ldr	r3, [pc, #332]	; (80013cc <HAL_RCC_OscConfig+0x334>)
 8001280:	430a      	orrs	r2, r1
 8001282:	601a      	str	r2, [r3, #0]
 8001284:	e018      	b.n	80012b8 <HAL_RCC_OscConfig+0x220>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001286:	4b51      	ldr	r3, [pc, #324]	; (80013cc <HAL_RCC_OscConfig+0x334>)
 8001288:	681a      	ldr	r2, [r3, #0]
 800128a:	4b50      	ldr	r3, [pc, #320]	; (80013cc <HAL_RCC_OscConfig+0x334>)
 800128c:	2101      	movs	r1, #1
 800128e:	438a      	bics	r2, r1
 8001290:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001292:	f7ff fa0b 	bl	80006ac <HAL_GetTick>
 8001296:	0003      	movs	r3, r0
 8001298:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800129a:	e008      	b.n	80012ae <HAL_RCC_OscConfig+0x216>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800129c:	f7ff fa06 	bl	80006ac <HAL_GetTick>
 80012a0:	0002      	movs	r2, r0
 80012a2:	69bb      	ldr	r3, [r7, #24]
 80012a4:	1ad3      	subs	r3, r2, r3
 80012a6:	2b02      	cmp	r3, #2
 80012a8:	d901      	bls.n	80012ae <HAL_RCC_OscConfig+0x216>
          {
            return HAL_TIMEOUT;
 80012aa:	2303      	movs	r3, #3
 80012ac:	e203      	b.n	80016b6 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012ae:	4b47      	ldr	r3, [pc, #284]	; (80013cc <HAL_RCC_OscConfig+0x334>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	2202      	movs	r2, #2
 80012b4:	4013      	ands	r3, r2
 80012b6:	d1f1      	bne.n	800129c <HAL_RCC_OscConfig+0x204>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	2208      	movs	r2, #8
 80012be:	4013      	ands	r3, r2
 80012c0:	d036      	beq.n	8001330 <HAL_RCC_OscConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	69db      	ldr	r3, [r3, #28]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d019      	beq.n	80012fe <HAL_RCC_OscConfig+0x266>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012ca:	4b40      	ldr	r3, [pc, #256]	; (80013cc <HAL_RCC_OscConfig+0x334>)
 80012cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80012ce:	4b3f      	ldr	r3, [pc, #252]	; (80013cc <HAL_RCC_OscConfig+0x334>)
 80012d0:	2101      	movs	r1, #1
 80012d2:	430a      	orrs	r2, r1
 80012d4:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012d6:	f7ff f9e9 	bl	80006ac <HAL_GetTick>
 80012da:	0003      	movs	r3, r0
 80012dc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012de:	e008      	b.n	80012f2 <HAL_RCC_OscConfig+0x25a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012e0:	f7ff f9e4 	bl	80006ac <HAL_GetTick>
 80012e4:	0002      	movs	r2, r0
 80012e6:	69bb      	ldr	r3, [r7, #24]
 80012e8:	1ad3      	subs	r3, r2, r3
 80012ea:	2b02      	cmp	r3, #2
 80012ec:	d901      	bls.n	80012f2 <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_TIMEOUT;
 80012ee:	2303      	movs	r3, #3
 80012f0:	e1e1      	b.n	80016b6 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012f2:	4b36      	ldr	r3, [pc, #216]	; (80013cc <HAL_RCC_OscConfig+0x334>)
 80012f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012f6:	2202      	movs	r2, #2
 80012f8:	4013      	ands	r3, r2
 80012fa:	d0f1      	beq.n	80012e0 <HAL_RCC_OscConfig+0x248>
 80012fc:	e018      	b.n	8001330 <HAL_RCC_OscConfig+0x298>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012fe:	4b33      	ldr	r3, [pc, #204]	; (80013cc <HAL_RCC_OscConfig+0x334>)
 8001300:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001302:	4b32      	ldr	r3, [pc, #200]	; (80013cc <HAL_RCC_OscConfig+0x334>)
 8001304:	2101      	movs	r1, #1
 8001306:	438a      	bics	r2, r1
 8001308:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800130a:	f7ff f9cf 	bl	80006ac <HAL_GetTick>
 800130e:	0003      	movs	r3, r0
 8001310:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001312:	e008      	b.n	8001326 <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001314:	f7ff f9ca 	bl	80006ac <HAL_GetTick>
 8001318:	0002      	movs	r2, r0
 800131a:	69bb      	ldr	r3, [r7, #24]
 800131c:	1ad3      	subs	r3, r2, r3
 800131e:	2b02      	cmp	r3, #2
 8001320:	d901      	bls.n	8001326 <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 8001322:	2303      	movs	r3, #3
 8001324:	e1c7      	b.n	80016b6 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001326:	4b29      	ldr	r3, [pc, #164]	; (80013cc <HAL_RCC_OscConfig+0x334>)
 8001328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800132a:	2202      	movs	r2, #2
 800132c:	4013      	ands	r3, r2
 800132e:	d1f1      	bne.n	8001314 <HAL_RCC_OscConfig+0x27c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	2204      	movs	r2, #4
 8001336:	4013      	ands	r3, r2
 8001338:	d100      	bne.n	800133c <HAL_RCC_OscConfig+0x2a4>
 800133a:	e0b5      	b.n	80014a8 <HAL_RCC_OscConfig+0x410>
  {
    FlagStatus       pwrclkchanged = RESET;
 800133c:	231f      	movs	r3, #31
 800133e:	18fb      	adds	r3, r7, r3
 8001340:	2200      	movs	r2, #0
 8001342:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001344:	4b21      	ldr	r3, [pc, #132]	; (80013cc <HAL_RCC_OscConfig+0x334>)
 8001346:	69da      	ldr	r2, [r3, #28]
 8001348:	2380      	movs	r3, #128	; 0x80
 800134a:	055b      	lsls	r3, r3, #21
 800134c:	4013      	ands	r3, r2
 800134e:	d111      	bne.n	8001374 <HAL_RCC_OscConfig+0x2dc>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001350:	4b1e      	ldr	r3, [pc, #120]	; (80013cc <HAL_RCC_OscConfig+0x334>)
 8001352:	69da      	ldr	r2, [r3, #28]
 8001354:	4b1d      	ldr	r3, [pc, #116]	; (80013cc <HAL_RCC_OscConfig+0x334>)
 8001356:	2180      	movs	r1, #128	; 0x80
 8001358:	0549      	lsls	r1, r1, #21
 800135a:	430a      	orrs	r2, r1
 800135c:	61da      	str	r2, [r3, #28]
 800135e:	4b1b      	ldr	r3, [pc, #108]	; (80013cc <HAL_RCC_OscConfig+0x334>)
 8001360:	69da      	ldr	r2, [r3, #28]
 8001362:	2380      	movs	r3, #128	; 0x80
 8001364:	055b      	lsls	r3, r3, #21
 8001366:	4013      	ands	r3, r2
 8001368:	60fb      	str	r3, [r7, #12]
 800136a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800136c:	231f      	movs	r3, #31
 800136e:	18fb      	adds	r3, r7, r3
 8001370:	2201      	movs	r2, #1
 8001372:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001374:	4b18      	ldr	r3, [pc, #96]	; (80013d8 <HAL_RCC_OscConfig+0x340>)
 8001376:	681a      	ldr	r2, [r3, #0]
 8001378:	2380      	movs	r3, #128	; 0x80
 800137a:	005b      	lsls	r3, r3, #1
 800137c:	4013      	ands	r3, r2
 800137e:	d11a      	bne.n	80013b6 <HAL_RCC_OscConfig+0x31e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001380:	4b15      	ldr	r3, [pc, #84]	; (80013d8 <HAL_RCC_OscConfig+0x340>)
 8001382:	681a      	ldr	r2, [r3, #0]
 8001384:	4b14      	ldr	r3, [pc, #80]	; (80013d8 <HAL_RCC_OscConfig+0x340>)
 8001386:	2180      	movs	r1, #128	; 0x80
 8001388:	0049      	lsls	r1, r1, #1
 800138a:	430a      	orrs	r2, r1
 800138c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800138e:	f7ff f98d 	bl	80006ac <HAL_GetTick>
 8001392:	0003      	movs	r3, r0
 8001394:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001396:	e008      	b.n	80013aa <HAL_RCC_OscConfig+0x312>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001398:	f7ff f988 	bl	80006ac <HAL_GetTick>
 800139c:	0002      	movs	r2, r0
 800139e:	69bb      	ldr	r3, [r7, #24]
 80013a0:	1ad3      	subs	r3, r2, r3
 80013a2:	2b64      	cmp	r3, #100	; 0x64
 80013a4:	d901      	bls.n	80013aa <HAL_RCC_OscConfig+0x312>
        {
          return HAL_TIMEOUT;
 80013a6:	2303      	movs	r3, #3
 80013a8:	e185      	b.n	80016b6 <HAL_RCC_OscConfig+0x61e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013aa:	4b0b      	ldr	r3, [pc, #44]	; (80013d8 <HAL_RCC_OscConfig+0x340>)
 80013ac:	681a      	ldr	r2, [r3, #0]
 80013ae:	2380      	movs	r3, #128	; 0x80
 80013b0:	005b      	lsls	r3, r3, #1
 80013b2:	4013      	ands	r3, r2
 80013b4:	d0f0      	beq.n	8001398 <HAL_RCC_OscConfig+0x300>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	689b      	ldr	r3, [r3, #8]
 80013ba:	2b01      	cmp	r3, #1
 80013bc:	d10e      	bne.n	80013dc <HAL_RCC_OscConfig+0x344>
 80013be:	4b03      	ldr	r3, [pc, #12]	; (80013cc <HAL_RCC_OscConfig+0x334>)
 80013c0:	6a1a      	ldr	r2, [r3, #32]
 80013c2:	4b02      	ldr	r3, [pc, #8]	; (80013cc <HAL_RCC_OscConfig+0x334>)
 80013c4:	2101      	movs	r1, #1
 80013c6:	430a      	orrs	r2, r1
 80013c8:	621a      	str	r2, [r3, #32]
 80013ca:	e035      	b.n	8001438 <HAL_RCC_OscConfig+0x3a0>
 80013cc:	40021000 	.word	0x40021000
 80013d0:	fffeffff 	.word	0xfffeffff
 80013d4:	fffbffff 	.word	0xfffbffff
 80013d8:	40007000 	.word	0x40007000
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	689b      	ldr	r3, [r3, #8]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d10c      	bne.n	80013fe <HAL_RCC_OscConfig+0x366>
 80013e4:	4bb6      	ldr	r3, [pc, #728]	; (80016c0 <HAL_RCC_OscConfig+0x628>)
 80013e6:	6a1a      	ldr	r2, [r3, #32]
 80013e8:	4bb5      	ldr	r3, [pc, #724]	; (80016c0 <HAL_RCC_OscConfig+0x628>)
 80013ea:	2101      	movs	r1, #1
 80013ec:	438a      	bics	r2, r1
 80013ee:	621a      	str	r2, [r3, #32]
 80013f0:	4bb3      	ldr	r3, [pc, #716]	; (80016c0 <HAL_RCC_OscConfig+0x628>)
 80013f2:	6a1a      	ldr	r2, [r3, #32]
 80013f4:	4bb2      	ldr	r3, [pc, #712]	; (80016c0 <HAL_RCC_OscConfig+0x628>)
 80013f6:	2104      	movs	r1, #4
 80013f8:	438a      	bics	r2, r1
 80013fa:	621a      	str	r2, [r3, #32]
 80013fc:	e01c      	b.n	8001438 <HAL_RCC_OscConfig+0x3a0>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	689b      	ldr	r3, [r3, #8]
 8001402:	2b05      	cmp	r3, #5
 8001404:	d10c      	bne.n	8001420 <HAL_RCC_OscConfig+0x388>
 8001406:	4bae      	ldr	r3, [pc, #696]	; (80016c0 <HAL_RCC_OscConfig+0x628>)
 8001408:	6a1a      	ldr	r2, [r3, #32]
 800140a:	4bad      	ldr	r3, [pc, #692]	; (80016c0 <HAL_RCC_OscConfig+0x628>)
 800140c:	2104      	movs	r1, #4
 800140e:	430a      	orrs	r2, r1
 8001410:	621a      	str	r2, [r3, #32]
 8001412:	4bab      	ldr	r3, [pc, #684]	; (80016c0 <HAL_RCC_OscConfig+0x628>)
 8001414:	6a1a      	ldr	r2, [r3, #32]
 8001416:	4baa      	ldr	r3, [pc, #680]	; (80016c0 <HAL_RCC_OscConfig+0x628>)
 8001418:	2101      	movs	r1, #1
 800141a:	430a      	orrs	r2, r1
 800141c:	621a      	str	r2, [r3, #32]
 800141e:	e00b      	b.n	8001438 <HAL_RCC_OscConfig+0x3a0>
 8001420:	4ba7      	ldr	r3, [pc, #668]	; (80016c0 <HAL_RCC_OscConfig+0x628>)
 8001422:	6a1a      	ldr	r2, [r3, #32]
 8001424:	4ba6      	ldr	r3, [pc, #664]	; (80016c0 <HAL_RCC_OscConfig+0x628>)
 8001426:	2101      	movs	r1, #1
 8001428:	438a      	bics	r2, r1
 800142a:	621a      	str	r2, [r3, #32]
 800142c:	4ba4      	ldr	r3, [pc, #656]	; (80016c0 <HAL_RCC_OscConfig+0x628>)
 800142e:	6a1a      	ldr	r2, [r3, #32]
 8001430:	4ba3      	ldr	r3, [pc, #652]	; (80016c0 <HAL_RCC_OscConfig+0x628>)
 8001432:	2104      	movs	r1, #4
 8001434:	438a      	bics	r2, r1
 8001436:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	689b      	ldr	r3, [r3, #8]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d014      	beq.n	800146a <HAL_RCC_OscConfig+0x3d2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001440:	f7ff f934 	bl	80006ac <HAL_GetTick>
 8001444:	0003      	movs	r3, r0
 8001446:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001448:	e009      	b.n	800145e <HAL_RCC_OscConfig+0x3c6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800144a:	f7ff f92f 	bl	80006ac <HAL_GetTick>
 800144e:	0002      	movs	r2, r0
 8001450:	69bb      	ldr	r3, [r7, #24]
 8001452:	1ad3      	subs	r3, r2, r3
 8001454:	4a9b      	ldr	r2, [pc, #620]	; (80016c4 <HAL_RCC_OscConfig+0x62c>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d901      	bls.n	800145e <HAL_RCC_OscConfig+0x3c6>
        {
          return HAL_TIMEOUT;
 800145a:	2303      	movs	r3, #3
 800145c:	e12b      	b.n	80016b6 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800145e:	4b98      	ldr	r3, [pc, #608]	; (80016c0 <HAL_RCC_OscConfig+0x628>)
 8001460:	6a1b      	ldr	r3, [r3, #32]
 8001462:	2202      	movs	r2, #2
 8001464:	4013      	ands	r3, r2
 8001466:	d0f0      	beq.n	800144a <HAL_RCC_OscConfig+0x3b2>
 8001468:	e013      	b.n	8001492 <HAL_RCC_OscConfig+0x3fa>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800146a:	f7ff f91f 	bl	80006ac <HAL_GetTick>
 800146e:	0003      	movs	r3, r0
 8001470:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001472:	e009      	b.n	8001488 <HAL_RCC_OscConfig+0x3f0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001474:	f7ff f91a 	bl	80006ac <HAL_GetTick>
 8001478:	0002      	movs	r2, r0
 800147a:	69bb      	ldr	r3, [r7, #24]
 800147c:	1ad3      	subs	r3, r2, r3
 800147e:	4a91      	ldr	r2, [pc, #580]	; (80016c4 <HAL_RCC_OscConfig+0x62c>)
 8001480:	4293      	cmp	r3, r2
 8001482:	d901      	bls.n	8001488 <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 8001484:	2303      	movs	r3, #3
 8001486:	e116      	b.n	80016b6 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001488:	4b8d      	ldr	r3, [pc, #564]	; (80016c0 <HAL_RCC_OscConfig+0x628>)
 800148a:	6a1b      	ldr	r3, [r3, #32]
 800148c:	2202      	movs	r2, #2
 800148e:	4013      	ands	r3, r2
 8001490:	d1f0      	bne.n	8001474 <HAL_RCC_OscConfig+0x3dc>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001492:	231f      	movs	r3, #31
 8001494:	18fb      	adds	r3, r7, r3
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	2b01      	cmp	r3, #1
 800149a:	d105      	bne.n	80014a8 <HAL_RCC_OscConfig+0x410>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800149c:	4b88      	ldr	r3, [pc, #544]	; (80016c0 <HAL_RCC_OscConfig+0x628>)
 800149e:	69da      	ldr	r2, [r3, #28]
 80014a0:	4b87      	ldr	r3, [pc, #540]	; (80016c0 <HAL_RCC_OscConfig+0x628>)
 80014a2:	4989      	ldr	r1, [pc, #548]	; (80016c8 <HAL_RCC_OscConfig+0x630>)
 80014a4:	400a      	ands	r2, r1
 80014a6:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	2210      	movs	r2, #16
 80014ae:	4013      	ands	r3, r2
 80014b0:	d063      	beq.n	800157a <HAL_RCC_OscConfig+0x4e2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	695b      	ldr	r3, [r3, #20]
 80014b6:	2b01      	cmp	r3, #1
 80014b8:	d12a      	bne.n	8001510 <HAL_RCC_OscConfig+0x478>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80014ba:	4b81      	ldr	r3, [pc, #516]	; (80016c0 <HAL_RCC_OscConfig+0x628>)
 80014bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014be:	4b80      	ldr	r3, [pc, #512]	; (80016c0 <HAL_RCC_OscConfig+0x628>)
 80014c0:	2104      	movs	r1, #4
 80014c2:	430a      	orrs	r2, r1
 80014c4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80014c6:	4b7e      	ldr	r3, [pc, #504]	; (80016c0 <HAL_RCC_OscConfig+0x628>)
 80014c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014ca:	4b7d      	ldr	r3, [pc, #500]	; (80016c0 <HAL_RCC_OscConfig+0x628>)
 80014cc:	2101      	movs	r1, #1
 80014ce:	430a      	orrs	r2, r1
 80014d0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014d2:	f7ff f8eb 	bl	80006ac <HAL_GetTick>
 80014d6:	0003      	movs	r3, r0
 80014d8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80014da:	e008      	b.n	80014ee <HAL_RCC_OscConfig+0x456>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80014dc:	f7ff f8e6 	bl	80006ac <HAL_GetTick>
 80014e0:	0002      	movs	r2, r0
 80014e2:	69bb      	ldr	r3, [r7, #24]
 80014e4:	1ad3      	subs	r3, r2, r3
 80014e6:	2b02      	cmp	r3, #2
 80014e8:	d901      	bls.n	80014ee <HAL_RCC_OscConfig+0x456>
        {
          return HAL_TIMEOUT;
 80014ea:	2303      	movs	r3, #3
 80014ec:	e0e3      	b.n	80016b6 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80014ee:	4b74      	ldr	r3, [pc, #464]	; (80016c0 <HAL_RCC_OscConfig+0x628>)
 80014f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014f2:	2202      	movs	r2, #2
 80014f4:	4013      	ands	r3, r2
 80014f6:	d0f1      	beq.n	80014dc <HAL_RCC_OscConfig+0x444>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80014f8:	4b71      	ldr	r3, [pc, #452]	; (80016c0 <HAL_RCC_OscConfig+0x628>)
 80014fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014fc:	22f8      	movs	r2, #248	; 0xf8
 80014fe:	4393      	bics	r3, r2
 8001500:	0019      	movs	r1, r3
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	699b      	ldr	r3, [r3, #24]
 8001506:	00da      	lsls	r2, r3, #3
 8001508:	4b6d      	ldr	r3, [pc, #436]	; (80016c0 <HAL_RCC_OscConfig+0x628>)
 800150a:	430a      	orrs	r2, r1
 800150c:	635a      	str	r2, [r3, #52]	; 0x34
 800150e:	e034      	b.n	800157a <HAL_RCC_OscConfig+0x4e2>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	695b      	ldr	r3, [r3, #20]
 8001514:	3305      	adds	r3, #5
 8001516:	d111      	bne.n	800153c <HAL_RCC_OscConfig+0x4a4>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001518:	4b69      	ldr	r3, [pc, #420]	; (80016c0 <HAL_RCC_OscConfig+0x628>)
 800151a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800151c:	4b68      	ldr	r3, [pc, #416]	; (80016c0 <HAL_RCC_OscConfig+0x628>)
 800151e:	2104      	movs	r1, #4
 8001520:	438a      	bics	r2, r1
 8001522:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001524:	4b66      	ldr	r3, [pc, #408]	; (80016c0 <HAL_RCC_OscConfig+0x628>)
 8001526:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001528:	22f8      	movs	r2, #248	; 0xf8
 800152a:	4393      	bics	r3, r2
 800152c:	0019      	movs	r1, r3
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	699b      	ldr	r3, [r3, #24]
 8001532:	00da      	lsls	r2, r3, #3
 8001534:	4b62      	ldr	r3, [pc, #392]	; (80016c0 <HAL_RCC_OscConfig+0x628>)
 8001536:	430a      	orrs	r2, r1
 8001538:	635a      	str	r2, [r3, #52]	; 0x34
 800153a:	e01e      	b.n	800157a <HAL_RCC_OscConfig+0x4e2>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800153c:	4b60      	ldr	r3, [pc, #384]	; (80016c0 <HAL_RCC_OscConfig+0x628>)
 800153e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001540:	4b5f      	ldr	r3, [pc, #380]	; (80016c0 <HAL_RCC_OscConfig+0x628>)
 8001542:	2104      	movs	r1, #4
 8001544:	430a      	orrs	r2, r1
 8001546:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001548:	4b5d      	ldr	r3, [pc, #372]	; (80016c0 <HAL_RCC_OscConfig+0x628>)
 800154a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800154c:	4b5c      	ldr	r3, [pc, #368]	; (80016c0 <HAL_RCC_OscConfig+0x628>)
 800154e:	2101      	movs	r1, #1
 8001550:	438a      	bics	r2, r1
 8001552:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001554:	f7ff f8aa 	bl	80006ac <HAL_GetTick>
 8001558:	0003      	movs	r3, r0
 800155a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800155c:	e008      	b.n	8001570 <HAL_RCC_OscConfig+0x4d8>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800155e:	f7ff f8a5 	bl	80006ac <HAL_GetTick>
 8001562:	0002      	movs	r2, r0
 8001564:	69bb      	ldr	r3, [r7, #24]
 8001566:	1ad3      	subs	r3, r2, r3
 8001568:	2b02      	cmp	r3, #2
 800156a:	d901      	bls.n	8001570 <HAL_RCC_OscConfig+0x4d8>
        {
          return HAL_TIMEOUT;
 800156c:	2303      	movs	r3, #3
 800156e:	e0a2      	b.n	80016b6 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001570:	4b53      	ldr	r3, [pc, #332]	; (80016c0 <HAL_RCC_OscConfig+0x628>)
 8001572:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001574:	2202      	movs	r2, #2
 8001576:	4013      	ands	r3, r2
 8001578:	d1f1      	bne.n	800155e <HAL_RCC_OscConfig+0x4c6>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6a1b      	ldr	r3, [r3, #32]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d100      	bne.n	8001584 <HAL_RCC_OscConfig+0x4ec>
 8001582:	e097      	b.n	80016b4 <HAL_RCC_OscConfig+0x61c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001584:	4b4e      	ldr	r3, [pc, #312]	; (80016c0 <HAL_RCC_OscConfig+0x628>)
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	220c      	movs	r2, #12
 800158a:	4013      	ands	r3, r2
 800158c:	2b08      	cmp	r3, #8
 800158e:	d100      	bne.n	8001592 <HAL_RCC_OscConfig+0x4fa>
 8001590:	e06b      	b.n	800166a <HAL_RCC_OscConfig+0x5d2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6a1b      	ldr	r3, [r3, #32]
 8001596:	2b02      	cmp	r3, #2
 8001598:	d14c      	bne.n	8001634 <HAL_RCC_OscConfig+0x59c>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800159a:	4b49      	ldr	r3, [pc, #292]	; (80016c0 <HAL_RCC_OscConfig+0x628>)
 800159c:	681a      	ldr	r2, [r3, #0]
 800159e:	4b48      	ldr	r3, [pc, #288]	; (80016c0 <HAL_RCC_OscConfig+0x628>)
 80015a0:	494a      	ldr	r1, [pc, #296]	; (80016cc <HAL_RCC_OscConfig+0x634>)
 80015a2:	400a      	ands	r2, r1
 80015a4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015a6:	f7ff f881 	bl	80006ac <HAL_GetTick>
 80015aa:	0003      	movs	r3, r0
 80015ac:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015ae:	e008      	b.n	80015c2 <HAL_RCC_OscConfig+0x52a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015b0:	f7ff f87c 	bl	80006ac <HAL_GetTick>
 80015b4:	0002      	movs	r2, r0
 80015b6:	69bb      	ldr	r3, [r7, #24]
 80015b8:	1ad3      	subs	r3, r2, r3
 80015ba:	2b02      	cmp	r3, #2
 80015bc:	d901      	bls.n	80015c2 <HAL_RCC_OscConfig+0x52a>
          {
            return HAL_TIMEOUT;
 80015be:	2303      	movs	r3, #3
 80015c0:	e079      	b.n	80016b6 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015c2:	4b3f      	ldr	r3, [pc, #252]	; (80016c0 <HAL_RCC_OscConfig+0x628>)
 80015c4:	681a      	ldr	r2, [r3, #0]
 80015c6:	2380      	movs	r3, #128	; 0x80
 80015c8:	049b      	lsls	r3, r3, #18
 80015ca:	4013      	ands	r3, r2
 80015cc:	d1f0      	bne.n	80015b0 <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80015ce:	4b3c      	ldr	r3, [pc, #240]	; (80016c0 <HAL_RCC_OscConfig+0x628>)
 80015d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015d2:	220f      	movs	r2, #15
 80015d4:	4393      	bics	r3, r2
 80015d6:	0019      	movs	r1, r3
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015dc:	4b38      	ldr	r3, [pc, #224]	; (80016c0 <HAL_RCC_OscConfig+0x628>)
 80015de:	430a      	orrs	r2, r1
 80015e0:	62da      	str	r2, [r3, #44]	; 0x2c
 80015e2:	4b37      	ldr	r3, [pc, #220]	; (80016c0 <HAL_RCC_OscConfig+0x628>)
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	4a3a      	ldr	r2, [pc, #232]	; (80016d0 <HAL_RCC_OscConfig+0x638>)
 80015e8:	4013      	ands	r3, r2
 80015ea:	0019      	movs	r1, r3
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015f4:	431a      	orrs	r2, r3
 80015f6:	4b32      	ldr	r3, [pc, #200]	; (80016c0 <HAL_RCC_OscConfig+0x628>)
 80015f8:	430a      	orrs	r2, r1
 80015fa:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015fc:	4b30      	ldr	r3, [pc, #192]	; (80016c0 <HAL_RCC_OscConfig+0x628>)
 80015fe:	681a      	ldr	r2, [r3, #0]
 8001600:	4b2f      	ldr	r3, [pc, #188]	; (80016c0 <HAL_RCC_OscConfig+0x628>)
 8001602:	2180      	movs	r1, #128	; 0x80
 8001604:	0449      	lsls	r1, r1, #17
 8001606:	430a      	orrs	r2, r1
 8001608:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800160a:	f7ff f84f 	bl	80006ac <HAL_GetTick>
 800160e:	0003      	movs	r3, r0
 8001610:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001612:	e008      	b.n	8001626 <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001614:	f7ff f84a 	bl	80006ac <HAL_GetTick>
 8001618:	0002      	movs	r2, r0
 800161a:	69bb      	ldr	r3, [r7, #24]
 800161c:	1ad3      	subs	r3, r2, r3
 800161e:	2b02      	cmp	r3, #2
 8001620:	d901      	bls.n	8001626 <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 8001622:	2303      	movs	r3, #3
 8001624:	e047      	b.n	80016b6 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001626:	4b26      	ldr	r3, [pc, #152]	; (80016c0 <HAL_RCC_OscConfig+0x628>)
 8001628:	681a      	ldr	r2, [r3, #0]
 800162a:	2380      	movs	r3, #128	; 0x80
 800162c:	049b      	lsls	r3, r3, #18
 800162e:	4013      	ands	r3, r2
 8001630:	d0f0      	beq.n	8001614 <HAL_RCC_OscConfig+0x57c>
 8001632:	e03f      	b.n	80016b4 <HAL_RCC_OscConfig+0x61c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001634:	4b22      	ldr	r3, [pc, #136]	; (80016c0 <HAL_RCC_OscConfig+0x628>)
 8001636:	681a      	ldr	r2, [r3, #0]
 8001638:	4b21      	ldr	r3, [pc, #132]	; (80016c0 <HAL_RCC_OscConfig+0x628>)
 800163a:	4924      	ldr	r1, [pc, #144]	; (80016cc <HAL_RCC_OscConfig+0x634>)
 800163c:	400a      	ands	r2, r1
 800163e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001640:	f7ff f834 	bl	80006ac <HAL_GetTick>
 8001644:	0003      	movs	r3, r0
 8001646:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001648:	e008      	b.n	800165c <HAL_RCC_OscConfig+0x5c4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800164a:	f7ff f82f 	bl	80006ac <HAL_GetTick>
 800164e:	0002      	movs	r2, r0
 8001650:	69bb      	ldr	r3, [r7, #24]
 8001652:	1ad3      	subs	r3, r2, r3
 8001654:	2b02      	cmp	r3, #2
 8001656:	d901      	bls.n	800165c <HAL_RCC_OscConfig+0x5c4>
          {
            return HAL_TIMEOUT;
 8001658:	2303      	movs	r3, #3
 800165a:	e02c      	b.n	80016b6 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800165c:	4b18      	ldr	r3, [pc, #96]	; (80016c0 <HAL_RCC_OscConfig+0x628>)
 800165e:	681a      	ldr	r2, [r3, #0]
 8001660:	2380      	movs	r3, #128	; 0x80
 8001662:	049b      	lsls	r3, r3, #18
 8001664:	4013      	ands	r3, r2
 8001666:	d1f0      	bne.n	800164a <HAL_RCC_OscConfig+0x5b2>
 8001668:	e024      	b.n	80016b4 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6a1b      	ldr	r3, [r3, #32]
 800166e:	2b01      	cmp	r3, #1
 8001670:	d101      	bne.n	8001676 <HAL_RCC_OscConfig+0x5de>
      {
        return HAL_ERROR;
 8001672:	2301      	movs	r3, #1
 8001674:	e01f      	b.n	80016b6 <HAL_RCC_OscConfig+0x61e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001676:	4b12      	ldr	r3, [pc, #72]	; (80016c0 <HAL_RCC_OscConfig+0x628>)
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800167c:	4b10      	ldr	r3, [pc, #64]	; (80016c0 <HAL_RCC_OscConfig+0x628>)
 800167e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001680:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001682:	697a      	ldr	r2, [r7, #20]
 8001684:	23c0      	movs	r3, #192	; 0xc0
 8001686:	025b      	lsls	r3, r3, #9
 8001688:	401a      	ands	r2, r3
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800168e:	429a      	cmp	r2, r3
 8001690:	d10e      	bne.n	80016b0 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001692:	693b      	ldr	r3, [r7, #16]
 8001694:	220f      	movs	r2, #15
 8001696:	401a      	ands	r2, r3
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800169c:	429a      	cmp	r2, r3
 800169e:	d107      	bne.n	80016b0 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80016a0:	697a      	ldr	r2, [r7, #20]
 80016a2:	23f0      	movs	r3, #240	; 0xf0
 80016a4:	039b      	lsls	r3, r3, #14
 80016a6:	401a      	ands	r2, r3
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80016ac:	429a      	cmp	r2, r3
 80016ae:	d001      	beq.n	80016b4 <HAL_RCC_OscConfig+0x61c>
        {
          return HAL_ERROR;
 80016b0:	2301      	movs	r3, #1
 80016b2:	e000      	b.n	80016b6 <HAL_RCC_OscConfig+0x61e>
        }
      }
    }
  }

  return HAL_OK;
 80016b4:	2300      	movs	r3, #0
}
 80016b6:	0018      	movs	r0, r3
 80016b8:	46bd      	mov	sp, r7
 80016ba:	b008      	add	sp, #32
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	46c0      	nop			; (mov r8, r8)
 80016c0:	40021000 	.word	0x40021000
 80016c4:	00001388 	.word	0x00001388
 80016c8:	efffffff 	.word	0xefffffff
 80016cc:	feffffff 	.word	0xfeffffff
 80016d0:	ffc27fff 	.word	0xffc27fff

080016d4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b084      	sub	sp, #16
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
 80016dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d101      	bne.n	80016e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016e4:	2301      	movs	r3, #1
 80016e6:	e0b3      	b.n	8001850 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80016e8:	4b5b      	ldr	r3, [pc, #364]	; (8001858 <HAL_RCC_ClockConfig+0x184>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	2201      	movs	r2, #1
 80016ee:	4013      	ands	r3, r2
 80016f0:	683a      	ldr	r2, [r7, #0]
 80016f2:	429a      	cmp	r2, r3
 80016f4:	d911      	bls.n	800171a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016f6:	4b58      	ldr	r3, [pc, #352]	; (8001858 <HAL_RCC_ClockConfig+0x184>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	2201      	movs	r2, #1
 80016fc:	4393      	bics	r3, r2
 80016fe:	0019      	movs	r1, r3
 8001700:	4b55      	ldr	r3, [pc, #340]	; (8001858 <HAL_RCC_ClockConfig+0x184>)
 8001702:	683a      	ldr	r2, [r7, #0]
 8001704:	430a      	orrs	r2, r1
 8001706:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001708:	4b53      	ldr	r3, [pc, #332]	; (8001858 <HAL_RCC_ClockConfig+0x184>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	2201      	movs	r2, #1
 800170e:	4013      	ands	r3, r2
 8001710:	683a      	ldr	r2, [r7, #0]
 8001712:	429a      	cmp	r2, r3
 8001714:	d001      	beq.n	800171a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001716:	2301      	movs	r3, #1
 8001718:	e09a      	b.n	8001850 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	2202      	movs	r2, #2
 8001720:	4013      	ands	r3, r2
 8001722:	d015      	beq.n	8001750 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	2204      	movs	r2, #4
 800172a:	4013      	ands	r3, r2
 800172c:	d006      	beq.n	800173c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800172e:	4b4b      	ldr	r3, [pc, #300]	; (800185c <HAL_RCC_ClockConfig+0x188>)
 8001730:	685a      	ldr	r2, [r3, #4]
 8001732:	4b4a      	ldr	r3, [pc, #296]	; (800185c <HAL_RCC_ClockConfig+0x188>)
 8001734:	21e0      	movs	r1, #224	; 0xe0
 8001736:	00c9      	lsls	r1, r1, #3
 8001738:	430a      	orrs	r2, r1
 800173a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800173c:	4b47      	ldr	r3, [pc, #284]	; (800185c <HAL_RCC_ClockConfig+0x188>)
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	22f0      	movs	r2, #240	; 0xf0
 8001742:	4393      	bics	r3, r2
 8001744:	0019      	movs	r1, r3
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	689a      	ldr	r2, [r3, #8]
 800174a:	4b44      	ldr	r3, [pc, #272]	; (800185c <HAL_RCC_ClockConfig+0x188>)
 800174c:	430a      	orrs	r2, r1
 800174e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	2201      	movs	r2, #1
 8001756:	4013      	ands	r3, r2
 8001758:	d040      	beq.n	80017dc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	2b01      	cmp	r3, #1
 8001760:	d107      	bne.n	8001772 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001762:	4b3e      	ldr	r3, [pc, #248]	; (800185c <HAL_RCC_ClockConfig+0x188>)
 8001764:	681a      	ldr	r2, [r3, #0]
 8001766:	2380      	movs	r3, #128	; 0x80
 8001768:	029b      	lsls	r3, r3, #10
 800176a:	4013      	ands	r3, r2
 800176c:	d114      	bne.n	8001798 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800176e:	2301      	movs	r3, #1
 8001770:	e06e      	b.n	8001850 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	2b02      	cmp	r3, #2
 8001778:	d107      	bne.n	800178a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800177a:	4b38      	ldr	r3, [pc, #224]	; (800185c <HAL_RCC_ClockConfig+0x188>)
 800177c:	681a      	ldr	r2, [r3, #0]
 800177e:	2380      	movs	r3, #128	; 0x80
 8001780:	049b      	lsls	r3, r3, #18
 8001782:	4013      	ands	r3, r2
 8001784:	d108      	bne.n	8001798 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001786:	2301      	movs	r3, #1
 8001788:	e062      	b.n	8001850 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800178a:	4b34      	ldr	r3, [pc, #208]	; (800185c <HAL_RCC_ClockConfig+0x188>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	2202      	movs	r2, #2
 8001790:	4013      	ands	r3, r2
 8001792:	d101      	bne.n	8001798 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001794:	2301      	movs	r3, #1
 8001796:	e05b      	b.n	8001850 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001798:	4b30      	ldr	r3, [pc, #192]	; (800185c <HAL_RCC_ClockConfig+0x188>)
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	2203      	movs	r2, #3
 800179e:	4393      	bics	r3, r2
 80017a0:	0019      	movs	r1, r3
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	685a      	ldr	r2, [r3, #4]
 80017a6:	4b2d      	ldr	r3, [pc, #180]	; (800185c <HAL_RCC_ClockConfig+0x188>)
 80017a8:	430a      	orrs	r2, r1
 80017aa:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017ac:	f7fe ff7e 	bl	80006ac <HAL_GetTick>
 80017b0:	0003      	movs	r3, r0
 80017b2:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017b4:	e009      	b.n	80017ca <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017b6:	f7fe ff79 	bl	80006ac <HAL_GetTick>
 80017ba:	0002      	movs	r2, r0
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	1ad3      	subs	r3, r2, r3
 80017c0:	4a27      	ldr	r2, [pc, #156]	; (8001860 <HAL_RCC_ClockConfig+0x18c>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d901      	bls.n	80017ca <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 80017c6:	2303      	movs	r3, #3
 80017c8:	e042      	b.n	8001850 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017ca:	4b24      	ldr	r3, [pc, #144]	; (800185c <HAL_RCC_ClockConfig+0x188>)
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	220c      	movs	r2, #12
 80017d0:	401a      	ands	r2, r3
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	009b      	lsls	r3, r3, #2
 80017d8:	429a      	cmp	r2, r3
 80017da:	d1ec      	bne.n	80017b6 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80017dc:	4b1e      	ldr	r3, [pc, #120]	; (8001858 <HAL_RCC_ClockConfig+0x184>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	2201      	movs	r2, #1
 80017e2:	4013      	ands	r3, r2
 80017e4:	683a      	ldr	r2, [r7, #0]
 80017e6:	429a      	cmp	r2, r3
 80017e8:	d211      	bcs.n	800180e <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017ea:	4b1b      	ldr	r3, [pc, #108]	; (8001858 <HAL_RCC_ClockConfig+0x184>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	2201      	movs	r2, #1
 80017f0:	4393      	bics	r3, r2
 80017f2:	0019      	movs	r1, r3
 80017f4:	4b18      	ldr	r3, [pc, #96]	; (8001858 <HAL_RCC_ClockConfig+0x184>)
 80017f6:	683a      	ldr	r2, [r7, #0]
 80017f8:	430a      	orrs	r2, r1
 80017fa:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017fc:	4b16      	ldr	r3, [pc, #88]	; (8001858 <HAL_RCC_ClockConfig+0x184>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	2201      	movs	r2, #1
 8001802:	4013      	ands	r3, r2
 8001804:	683a      	ldr	r2, [r7, #0]
 8001806:	429a      	cmp	r2, r3
 8001808:	d001      	beq.n	800180e <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 800180a:	2301      	movs	r3, #1
 800180c:	e020      	b.n	8001850 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	2204      	movs	r2, #4
 8001814:	4013      	ands	r3, r2
 8001816:	d009      	beq.n	800182c <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001818:	4b10      	ldr	r3, [pc, #64]	; (800185c <HAL_RCC_ClockConfig+0x188>)
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	4a11      	ldr	r2, [pc, #68]	; (8001864 <HAL_RCC_ClockConfig+0x190>)
 800181e:	4013      	ands	r3, r2
 8001820:	0019      	movs	r1, r3
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	68da      	ldr	r2, [r3, #12]
 8001826:	4b0d      	ldr	r3, [pc, #52]	; (800185c <HAL_RCC_ClockConfig+0x188>)
 8001828:	430a      	orrs	r2, r1
 800182a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800182c:	f000 f820 	bl	8001870 <HAL_RCC_GetSysClockFreq>
 8001830:	0001      	movs	r1, r0
 8001832:	4b0a      	ldr	r3, [pc, #40]	; (800185c <HAL_RCC_ClockConfig+0x188>)
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	091b      	lsrs	r3, r3, #4
 8001838:	220f      	movs	r2, #15
 800183a:	4013      	ands	r3, r2
 800183c:	4a0a      	ldr	r2, [pc, #40]	; (8001868 <HAL_RCC_ClockConfig+0x194>)
 800183e:	5cd3      	ldrb	r3, [r2, r3]
 8001840:	000a      	movs	r2, r1
 8001842:	40da      	lsrs	r2, r3
 8001844:	4b09      	ldr	r3, [pc, #36]	; (800186c <HAL_RCC_ClockConfig+0x198>)
 8001846:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001848:	2000      	movs	r0, #0
 800184a:	f7fe fee9 	bl	8000620 <HAL_InitTick>
  
  return HAL_OK;
 800184e:	2300      	movs	r3, #0
}
 8001850:	0018      	movs	r0, r3
 8001852:	46bd      	mov	sp, r7
 8001854:	b004      	add	sp, #16
 8001856:	bd80      	pop	{r7, pc}
 8001858:	40022000 	.word	0x40022000
 800185c:	40021000 	.word	0x40021000
 8001860:	00001388 	.word	0x00001388
 8001864:	fffff8ff 	.word	0xfffff8ff
 8001868:	08001b88 	.word	0x08001b88
 800186c:	20000000 	.word	0x20000000

08001870 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001870:	b590      	push	{r4, r7, lr}
 8001872:	b08f      	sub	sp, #60	; 0x3c
 8001874:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001876:	2314      	movs	r3, #20
 8001878:	18fb      	adds	r3, r7, r3
 800187a:	4a2c      	ldr	r2, [pc, #176]	; (800192c <HAL_RCC_GetSysClockFreq+0xbc>)
 800187c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800187e:	c313      	stmia	r3!, {r0, r1, r4}
 8001880:	6812      	ldr	r2, [r2, #0]
 8001882:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001884:	1d3b      	adds	r3, r7, #4
 8001886:	4a2a      	ldr	r2, [pc, #168]	; (8001930 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001888:	ca13      	ldmia	r2!, {r0, r1, r4}
 800188a:	c313      	stmia	r3!, {r0, r1, r4}
 800188c:	6812      	ldr	r2, [r2, #0]
 800188e:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001890:	2300      	movs	r3, #0
 8001892:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001894:	2300      	movs	r3, #0
 8001896:	62bb      	str	r3, [r7, #40]	; 0x28
 8001898:	2300      	movs	r3, #0
 800189a:	637b      	str	r3, [r7, #52]	; 0x34
 800189c:	2300      	movs	r3, #0
 800189e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80018a0:	2300      	movs	r3, #0
 80018a2:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80018a4:	4b23      	ldr	r3, [pc, #140]	; (8001934 <HAL_RCC_GetSysClockFreq+0xc4>)
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80018aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018ac:	220c      	movs	r2, #12
 80018ae:	4013      	ands	r3, r2
 80018b0:	2b04      	cmp	r3, #4
 80018b2:	d002      	beq.n	80018ba <HAL_RCC_GetSysClockFreq+0x4a>
 80018b4:	2b08      	cmp	r3, #8
 80018b6:	d003      	beq.n	80018c0 <HAL_RCC_GetSysClockFreq+0x50>
 80018b8:	e02f      	b.n	800191a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80018ba:	4b1f      	ldr	r3, [pc, #124]	; (8001938 <HAL_RCC_GetSysClockFreq+0xc8>)
 80018bc:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80018be:	e02f      	b.n	8001920 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80018c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018c2:	0c9b      	lsrs	r3, r3, #18
 80018c4:	220f      	movs	r2, #15
 80018c6:	4013      	ands	r3, r2
 80018c8:	2214      	movs	r2, #20
 80018ca:	18ba      	adds	r2, r7, r2
 80018cc:	5cd3      	ldrb	r3, [r2, r3]
 80018ce:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80018d0:	4b18      	ldr	r3, [pc, #96]	; (8001934 <HAL_RCC_GetSysClockFreq+0xc4>)
 80018d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018d4:	220f      	movs	r2, #15
 80018d6:	4013      	ands	r3, r2
 80018d8:	1d3a      	adds	r2, r7, #4
 80018da:	5cd3      	ldrb	r3, [r2, r3]
 80018dc:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80018de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80018e0:	23c0      	movs	r3, #192	; 0xc0
 80018e2:	025b      	lsls	r3, r3, #9
 80018e4:	401a      	ands	r2, r3
 80018e6:	2380      	movs	r3, #128	; 0x80
 80018e8:	025b      	lsls	r3, r3, #9
 80018ea:	429a      	cmp	r2, r3
 80018ec:	d109      	bne.n	8001902 <HAL_RCC_GetSysClockFreq+0x92>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80018ee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80018f0:	4811      	ldr	r0, [pc, #68]	; (8001938 <HAL_RCC_GetSysClockFreq+0xc8>)
 80018f2:	f7fe fc09 	bl	8000108 <__udivsi3>
 80018f6:	0003      	movs	r3, r0
 80018f8:	001a      	movs	r2, r3
 80018fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018fc:	4353      	muls	r3, r2
 80018fe:	637b      	str	r3, [r7, #52]	; 0x34
 8001900:	e008      	b.n	8001914 <HAL_RCC_GetSysClockFreq+0xa4>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001902:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001904:	480c      	ldr	r0, [pc, #48]	; (8001938 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001906:	f7fe fbff 	bl	8000108 <__udivsi3>
 800190a:	0003      	movs	r3, r0
 800190c:	001a      	movs	r2, r3
 800190e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001910:	4353      	muls	r3, r2
 8001912:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8001914:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001916:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001918:	e002      	b.n	8001920 <HAL_RCC_GetSysClockFreq+0xb0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800191a:	4b07      	ldr	r3, [pc, #28]	; (8001938 <HAL_RCC_GetSysClockFreq+0xc8>)
 800191c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800191e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001922:	0018      	movs	r0, r3
 8001924:	46bd      	mov	sp, r7
 8001926:	b00f      	add	sp, #60	; 0x3c
 8001928:	bd90      	pop	{r4, r7, pc}
 800192a:	46c0      	nop			; (mov r8, r8)
 800192c:	08001b68 	.word	0x08001b68
 8001930:	08001b78 	.word	0x08001b78
 8001934:	40021000 	.word	0x40021000
 8001938:	007a1200 	.word	0x007a1200

0800193c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b086      	sub	sp, #24
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001944:	2300      	movs	r3, #0
 8001946:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001948:	2300      	movs	r3, #0
 800194a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681a      	ldr	r2, [r3, #0]
 8001950:	2380      	movs	r3, #128	; 0x80
 8001952:	025b      	lsls	r3, r3, #9
 8001954:	4013      	ands	r3, r2
 8001956:	d100      	bne.n	800195a <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001958:	e08f      	b.n	8001a7a <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800195a:	2317      	movs	r3, #23
 800195c:	18fb      	adds	r3, r7, r3
 800195e:	2200      	movs	r2, #0
 8001960:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001962:	4b5f      	ldr	r3, [pc, #380]	; (8001ae0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001964:	69da      	ldr	r2, [r3, #28]
 8001966:	2380      	movs	r3, #128	; 0x80
 8001968:	055b      	lsls	r3, r3, #21
 800196a:	4013      	ands	r3, r2
 800196c:	d111      	bne.n	8001992 <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800196e:	4b5c      	ldr	r3, [pc, #368]	; (8001ae0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001970:	69da      	ldr	r2, [r3, #28]
 8001972:	4b5b      	ldr	r3, [pc, #364]	; (8001ae0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001974:	2180      	movs	r1, #128	; 0x80
 8001976:	0549      	lsls	r1, r1, #21
 8001978:	430a      	orrs	r2, r1
 800197a:	61da      	str	r2, [r3, #28]
 800197c:	4b58      	ldr	r3, [pc, #352]	; (8001ae0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800197e:	69da      	ldr	r2, [r3, #28]
 8001980:	2380      	movs	r3, #128	; 0x80
 8001982:	055b      	lsls	r3, r3, #21
 8001984:	4013      	ands	r3, r2
 8001986:	60bb      	str	r3, [r7, #8]
 8001988:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800198a:	2317      	movs	r3, #23
 800198c:	18fb      	adds	r3, r7, r3
 800198e:	2201      	movs	r2, #1
 8001990:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001992:	4b54      	ldr	r3, [pc, #336]	; (8001ae4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001994:	681a      	ldr	r2, [r3, #0]
 8001996:	2380      	movs	r3, #128	; 0x80
 8001998:	005b      	lsls	r3, r3, #1
 800199a:	4013      	ands	r3, r2
 800199c:	d11a      	bne.n	80019d4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800199e:	4b51      	ldr	r3, [pc, #324]	; (8001ae4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80019a0:	681a      	ldr	r2, [r3, #0]
 80019a2:	4b50      	ldr	r3, [pc, #320]	; (8001ae4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80019a4:	2180      	movs	r1, #128	; 0x80
 80019a6:	0049      	lsls	r1, r1, #1
 80019a8:	430a      	orrs	r2, r1
 80019aa:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019ac:	f7fe fe7e 	bl	80006ac <HAL_GetTick>
 80019b0:	0003      	movs	r3, r0
 80019b2:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019b4:	e008      	b.n	80019c8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019b6:	f7fe fe79 	bl	80006ac <HAL_GetTick>
 80019ba:	0002      	movs	r2, r0
 80019bc:	693b      	ldr	r3, [r7, #16]
 80019be:	1ad3      	subs	r3, r2, r3
 80019c0:	2b64      	cmp	r3, #100	; 0x64
 80019c2:	d901      	bls.n	80019c8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 80019c4:	2303      	movs	r3, #3
 80019c6:	e087      	b.n	8001ad8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019c8:	4b46      	ldr	r3, [pc, #280]	; (8001ae4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80019ca:	681a      	ldr	r2, [r3, #0]
 80019cc:	2380      	movs	r3, #128	; 0x80
 80019ce:	005b      	lsls	r3, r3, #1
 80019d0:	4013      	ands	r3, r2
 80019d2:	d0f0      	beq.n	80019b6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80019d4:	4b42      	ldr	r3, [pc, #264]	; (8001ae0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80019d6:	6a1a      	ldr	r2, [r3, #32]
 80019d8:	23c0      	movs	r3, #192	; 0xc0
 80019da:	009b      	lsls	r3, r3, #2
 80019dc:	4013      	ands	r3, r2
 80019de:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d034      	beq.n	8001a50 <HAL_RCCEx_PeriphCLKConfig+0x114>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	685a      	ldr	r2, [r3, #4]
 80019ea:	23c0      	movs	r3, #192	; 0xc0
 80019ec:	009b      	lsls	r3, r3, #2
 80019ee:	4013      	ands	r3, r2
 80019f0:	68fa      	ldr	r2, [r7, #12]
 80019f2:	429a      	cmp	r2, r3
 80019f4:	d02c      	beq.n	8001a50 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80019f6:	4b3a      	ldr	r3, [pc, #232]	; (8001ae0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80019f8:	6a1b      	ldr	r3, [r3, #32]
 80019fa:	4a3b      	ldr	r2, [pc, #236]	; (8001ae8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80019fc:	4013      	ands	r3, r2
 80019fe:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001a00:	4b37      	ldr	r3, [pc, #220]	; (8001ae0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001a02:	6a1a      	ldr	r2, [r3, #32]
 8001a04:	4b36      	ldr	r3, [pc, #216]	; (8001ae0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001a06:	2180      	movs	r1, #128	; 0x80
 8001a08:	0249      	lsls	r1, r1, #9
 8001a0a:	430a      	orrs	r2, r1
 8001a0c:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001a0e:	4b34      	ldr	r3, [pc, #208]	; (8001ae0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001a10:	6a1a      	ldr	r2, [r3, #32]
 8001a12:	4b33      	ldr	r3, [pc, #204]	; (8001ae0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001a14:	4935      	ldr	r1, [pc, #212]	; (8001aec <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8001a16:	400a      	ands	r2, r1
 8001a18:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001a1a:	4b31      	ldr	r3, [pc, #196]	; (8001ae0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001a1c:	68fa      	ldr	r2, [r7, #12]
 8001a1e:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	2201      	movs	r2, #1
 8001a24:	4013      	ands	r3, r2
 8001a26:	d013      	beq.n	8001a50 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a28:	f7fe fe40 	bl	80006ac <HAL_GetTick>
 8001a2c:	0003      	movs	r3, r0
 8001a2e:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a30:	e009      	b.n	8001a46 <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a32:	f7fe fe3b 	bl	80006ac <HAL_GetTick>
 8001a36:	0002      	movs	r2, r0
 8001a38:	693b      	ldr	r3, [r7, #16]
 8001a3a:	1ad3      	subs	r3, r2, r3
 8001a3c:	4a2c      	ldr	r2, [pc, #176]	; (8001af0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d901      	bls.n	8001a46 <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8001a42:	2303      	movs	r3, #3
 8001a44:	e048      	b.n	8001ad8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a46:	4b26      	ldr	r3, [pc, #152]	; (8001ae0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001a48:	6a1b      	ldr	r3, [r3, #32]
 8001a4a:	2202      	movs	r2, #2
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	d0f0      	beq.n	8001a32 <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001a50:	4b23      	ldr	r3, [pc, #140]	; (8001ae0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001a52:	6a1b      	ldr	r3, [r3, #32]
 8001a54:	4a24      	ldr	r2, [pc, #144]	; (8001ae8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001a56:	4013      	ands	r3, r2
 8001a58:	0019      	movs	r1, r3
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	685a      	ldr	r2, [r3, #4]
 8001a5e:	4b20      	ldr	r3, [pc, #128]	; (8001ae0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001a60:	430a      	orrs	r2, r1
 8001a62:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001a64:	2317      	movs	r3, #23
 8001a66:	18fb      	adds	r3, r7, r3
 8001a68:	781b      	ldrb	r3, [r3, #0]
 8001a6a:	2b01      	cmp	r3, #1
 8001a6c:	d105      	bne.n	8001a7a <HAL_RCCEx_PeriphCLKConfig+0x13e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a6e:	4b1c      	ldr	r3, [pc, #112]	; (8001ae0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001a70:	69da      	ldr	r2, [r3, #28]
 8001a72:	4b1b      	ldr	r3, [pc, #108]	; (8001ae0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001a74:	491f      	ldr	r1, [pc, #124]	; (8001af4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001a76:	400a      	ands	r2, r1
 8001a78:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	2201      	movs	r2, #1
 8001a80:	4013      	ands	r3, r2
 8001a82:	d009      	beq.n	8001a98 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001a84:	4b16      	ldr	r3, [pc, #88]	; (8001ae0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a88:	2203      	movs	r2, #3
 8001a8a:	4393      	bics	r3, r2
 8001a8c:	0019      	movs	r1, r3
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	689a      	ldr	r2, [r3, #8]
 8001a92:	4b13      	ldr	r3, [pc, #76]	; (8001ae0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001a94:	430a      	orrs	r2, r1
 8001a96:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	2220      	movs	r2, #32
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	d009      	beq.n	8001ab6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001aa2:	4b0f      	ldr	r3, [pc, #60]	; (8001ae0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa6:	2210      	movs	r2, #16
 8001aa8:	4393      	bics	r3, r2
 8001aaa:	0019      	movs	r1, r3
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	68da      	ldr	r2, [r3, #12]
 8001ab0:	4b0b      	ldr	r3, [pc, #44]	; (8001ae0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001ab2:	430a      	orrs	r2, r1
 8001ab4:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681a      	ldr	r2, [r3, #0]
 8001aba:	2380      	movs	r3, #128	; 0x80
 8001abc:	029b      	lsls	r3, r3, #10
 8001abe:	4013      	ands	r3, r2
 8001ac0:	d009      	beq.n	8001ad6 <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001ac2:	4b07      	ldr	r3, [pc, #28]	; (8001ae0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac6:	2280      	movs	r2, #128	; 0x80
 8001ac8:	4393      	bics	r3, r2
 8001aca:	0019      	movs	r1, r3
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	691a      	ldr	r2, [r3, #16]
 8001ad0:	4b03      	ldr	r3, [pc, #12]	; (8001ae0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001ad2:	430a      	orrs	r2, r1
 8001ad4:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001ad6:	2300      	movs	r3, #0
}
 8001ad8:	0018      	movs	r0, r3
 8001ada:	46bd      	mov	sp, r7
 8001adc:	b006      	add	sp, #24
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	40021000 	.word	0x40021000
 8001ae4:	40007000 	.word	0x40007000
 8001ae8:	fffffcff 	.word	0xfffffcff
 8001aec:	fffeffff 	.word	0xfffeffff
 8001af0:	00001388 	.word	0x00001388
 8001af4:	efffffff 	.word	0xefffffff

08001af8 <__libc_init_array>:
 8001af8:	b570      	push	{r4, r5, r6, lr}
 8001afa:	2600      	movs	r6, #0
 8001afc:	4d0c      	ldr	r5, [pc, #48]	; (8001b30 <__libc_init_array+0x38>)
 8001afe:	4c0d      	ldr	r4, [pc, #52]	; (8001b34 <__libc_init_array+0x3c>)
 8001b00:	1b64      	subs	r4, r4, r5
 8001b02:	10a4      	asrs	r4, r4, #2
 8001b04:	42a6      	cmp	r6, r4
 8001b06:	d109      	bne.n	8001b1c <__libc_init_array+0x24>
 8001b08:	2600      	movs	r6, #0
 8001b0a:	f000 f821 	bl	8001b50 <_init>
 8001b0e:	4d0a      	ldr	r5, [pc, #40]	; (8001b38 <__libc_init_array+0x40>)
 8001b10:	4c0a      	ldr	r4, [pc, #40]	; (8001b3c <__libc_init_array+0x44>)
 8001b12:	1b64      	subs	r4, r4, r5
 8001b14:	10a4      	asrs	r4, r4, #2
 8001b16:	42a6      	cmp	r6, r4
 8001b18:	d105      	bne.n	8001b26 <__libc_init_array+0x2e>
 8001b1a:	bd70      	pop	{r4, r5, r6, pc}
 8001b1c:	00b3      	lsls	r3, r6, #2
 8001b1e:	58eb      	ldr	r3, [r5, r3]
 8001b20:	4798      	blx	r3
 8001b22:	3601      	adds	r6, #1
 8001b24:	e7ee      	b.n	8001b04 <__libc_init_array+0xc>
 8001b26:	00b3      	lsls	r3, r6, #2
 8001b28:	58eb      	ldr	r3, [r5, r3]
 8001b2a:	4798      	blx	r3
 8001b2c:	3601      	adds	r6, #1
 8001b2e:	e7f2      	b.n	8001b16 <__libc_init_array+0x1e>
 8001b30:	08001b98 	.word	0x08001b98
 8001b34:	08001b98 	.word	0x08001b98
 8001b38:	08001b98 	.word	0x08001b98
 8001b3c:	08001b9c 	.word	0x08001b9c

08001b40 <memset>:
 8001b40:	0003      	movs	r3, r0
 8001b42:	1812      	adds	r2, r2, r0
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d100      	bne.n	8001b4a <memset+0xa>
 8001b48:	4770      	bx	lr
 8001b4a:	7019      	strb	r1, [r3, #0]
 8001b4c:	3301      	adds	r3, #1
 8001b4e:	e7f9      	b.n	8001b44 <memset+0x4>

08001b50 <_init>:
 8001b50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b52:	46c0      	nop			; (mov r8, r8)
 8001b54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001b56:	bc08      	pop	{r3}
 8001b58:	469e      	mov	lr, r3
 8001b5a:	4770      	bx	lr

08001b5c <_fini>:
 8001b5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b5e:	46c0      	nop			; (mov r8, r8)
 8001b60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001b62:	bc08      	pop	{r3}
 8001b64:	469e      	mov	lr, r3
 8001b66:	4770      	bx	lr
